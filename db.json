{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/icp.png","path":"img/icp.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/pwa/16.png","path":"img/pwa/16.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/pwa/apple-touch-icon.png","path":"img/pwa/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/pwa/32.png","path":"img/pwa/32.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/pwa/manifest.json","path":"img/pwa/manifest.json","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/pwa/safari-pinned-tab.svg","path":"img/pwa/safari-pinned-tab.svg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/activate-power-mode.js","path":"js/third-party/activate-power-mode.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/ClickShowText.js","path":"js/third-party/ClickShowText.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/canvas-nest.js","path":"js/third-party/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/click_heart.js","path":"js/third-party/click_heart.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/fireworks.js","path":"js/third-party/fireworks.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/piao.js","path":"js/third-party/piao.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/pwa/pwaicons/144.png","path":"img/pwa/pwaicons/144.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/pwa/pwaicons/36.png","path":"img/pwa/pwaicons/36.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/pwa/pwaicons/192.png","path":"img/pwa/pwaicons/192.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/pwa/pwaicons/48.png","path":"img/pwa/pwaicons/48.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/pwa/pwaicons/512.png","path":"img/pwa/pwaicons/512.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/pwa/pwaicons/72.png","path":"img/pwa/pwaicons/72.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/pwa/pwaicons/96.png","path":"img/pwa/pwaicons/96.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"45a99105a39652d7f9e3278dafb901253628c60e","modified":1594784318155},{"_id":"source/_data/link.yml","hash":"bd156b19b44d693f556ef465ac52c8d596d06a46","modified":1596082186165},{"_id":"source/_posts/CS61B-lecture10-11.md","hash":"29db0eeb865cfca9e6783af498c1a0c94188abfe","modified":1596029502232},{"_id":"source/_posts/CS51B-lecture1-6.md","hash":"d728b362cdbb55e1a3d4f1515ccf04ea6c51a2b6","modified":1596036977219},{"_id":"source/_posts/CS61B-lecture7，8，9.md","hash":"62441afe3a6591c7949dade25145c927ccbcc3ff","modified":1596036974864},{"_id":"source/categories/index.md","hash":"e0686f0000b05ffcff2ba68cde466db2a2139e25","modified":1596069153069},{"_id":"source/gallery/index.md","hash":"759a7e86d57a529af0e0a7e7f6dd8dac92764a53","modified":1596094166793},{"_id":"source/_posts/Git命令.md","hash":"30421a90c9d863a52a891fbe2746243dcdfdab00","modified":1595779553582},{"_id":"source/link/index.md","hash":"4c5d12b060cc0c9b19c65d0b1a9b6e349dc87410","modified":1596077327882},{"_id":"source/_posts/hexo指令.md","hash":"12acbe8fcb32359681d21cd9ca365edd76b881b9","modified":1596095746051},{"_id":"source/bangumis/index.md","hash":"c9c4cfc5563536cb681f507b991753415f15cd82","modified":1596095509523},{"_id":"source/messageboard/index.md","hash":"56f18a23552304b791076f9d98a555f0828713a9","modified":1594870205698},{"_id":"source/music/index.md","hash":"65ce28707230ae3beb1e97570b3b658495365d91","modified":1596094805316},{"_id":"source/tags/index.md","hash":"508b1de566191ebf83493388bf903bf4f1637cbf","modified":1596069128166},{"_id":"source/photos/index.md","hash":"9665cbfa61a11f1916c2395a2571df211c4c14b1","modified":1594870291895},{"_id":"themes/butterfly/LICENSE","hash":"e7e7b7677bb19563a9013e936486bdefeb761d07","modified":1596033219936},{"_id":"themes/butterfly/README.md","hash":"2ed9318e801ceab8da8f1bba9525cb5506721865","modified":1596033219936},{"_id":"themes/butterfly/README_CN.md","hash":"d744fb96591aed26fa4b219924bcb269245cd9b0","modified":1596033219937},{"_id":"themes/butterfly/_config.yml","hash":"9887251481fdae5d2c38faccfe80a4153e78ea20","modified":1596098239323},{"_id":"themes/butterfly/package.json","hash":"3aa0062f45f127879be42c02095841c5d44041d3","modified":1596033219983},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE.md","hash":"8f7a0f8d4bfc97ba106128828a33a9cc0a295194","modified":1596033219935},{"_id":"themes/butterfly/languages/default.yml","hash":"d20ee727e7f01cec360da6aff3133b82d61f3bb1","modified":1596033219939},{"_id":"themes/butterfly/.github/stale.yml","hash":"70467ce772e68de57a4bf2ac285f1c0b122f25f5","modified":1596033219935},{"_id":"themes/butterfly/languages/en.yml","hash":"d20ee727e7f01cec360da6aff3133b82d61f3bb1","modified":1596033219939},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"0b9c64c30dab72ad0d6b3c77a8f697f0a62ae5af","modified":1596092911816},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"d2ca0539070c98d4539646621c68c64059c3a123","modified":1596033219940},{"_id":"themes/butterfly/layout/404.pug","hash":"032d5cba8a19bad5c9a9a474ea8bbc997b8b58d2","modified":1596033219941},{"_id":"themes/butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1596033219942},{"_id":"themes/butterfly/layout/category.pug","hash":"90e56274a7c853f6f30337011f9c9d6d035950dc","modified":1596033219942},{"_id":"themes/butterfly/layout/flink.pug","hash":"b2222e7cacd5b9e1b730ea52e3c1032623f5bd5e","modified":1596033219942},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1596033219981},{"_id":"themes/butterfly/layout/page.pug","hash":"5cef945ed21199da6950cb3806d1faa45d3130c1","modified":1596033219981},{"_id":"themes/butterfly/layout/post.pug","hash":"ace5cefcd90d34e09119bedb064c34238f653687","modified":1596033219982},{"_id":"themes/butterfly/layout/tag.pug","hash":"e658aa76a11d1e18ec00131d9cec1a38b3d6a62e","modified":1596033219982},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"cd757323bda770b16d51f5eb75299b9c7b280982","modified":1596033219943},{"_id":"themes/butterfly/layout/includes/aplayer.pug","hash":"679ef6adba2c17e6f4e1f86e484748ce1311dc18","modified":1596082990569},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"91ba9c2826c588011d6b28bb43b113287c79caae","modified":1596033219950},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"d99a94eb54a65b84b25c64a31f68002a8c255db2","modified":1596033219951},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e6f5bbe92c402941bdb1a440f4d7a444c950c8f6","modified":1596086724179},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"db722b3905c1f6ac750a1a851de09fbe2547837e","modified":1596033219968},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"b3abeb60790f6cbf2d110325bda27921949ac013","modified":1596033219969},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"a70cce6dbd18db5c56ed13e992e013c96f7d542c","modified":1596033219974},{"_id":"themes/butterfly/scripts/events/404.js","hash":"5f6127ede7d139891208340b5cf5bf9314e4be7d","modified":1596033219984},{"_id":"themes/butterfly/scripts/events/replace_config.js","hash":"39fabaae6943bbafb8248ee81ae9b32e1145c84a","modified":1596033219984},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"8df2ec7c5fdee1dd86462103f6693774e338bec7","modified":1596033219987},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"cbdfab0bc5903ae8b84b21d153281f5c91e032d7","modified":1596033219985},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"8e44ec5c9a50b01790186cb6c319b70a42581add","modified":1596033219985},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"0a141c7d10b4467c0ad3d343dee54db0709bf7f0","modified":1596033219987},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"4e6cffc4ecf5c600dc50b5677a21c3569e2ed043","modified":1596033219988},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"0ad86baaa665efe0aaeaa979e9b2c77f6a28946b","modified":1596033219988},{"_id":"themes/butterfly/scripts/tags/button.js","hash":"9c04a14213c0817ee1950e04fb020241b5137a99","modified":1596033219989},{"_id":"themes/butterfly/scripts/tags/gallery.js","hash":"1735602a8da89b3ee961899c0eb4c9e6116b580c","modified":1596033219990},{"_id":"themes/butterfly/scripts/tags/hide.js","hash":"f2f75f91d6cf2452e0c771735b9b7434afb718d1","modified":1596033219990},{"_id":"themes/butterfly/scripts/tags/mermaid.js","hash":"46d3c4c6a38d750d1ad9ca695d6c0df62b7107d6","modified":1596033219991},{"_id":"themes/butterfly/scripts/tags/tabs.js","hash":"9dab568d42e560cbe178acec629a939e924034b0","modified":1596033219991},{"_id":"themes/butterfly/scripts/tags/note.js","hash":"b6acc0f4f994692d124c7a251a2606afde3fcf9d","modified":1596033219991},{"_id":"themes/butterfly/source/css/index.styl","hash":"7c5f165d30a4ce07cb3c60bc10d3adab226fce27","modified":1596033220011},{"_id":"themes/butterfly/source/css/var.styl","hash":"9dc81387006ae8edb0535029b7deb461e1cba964","modified":1596033220013},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1596033220014},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1596033220014},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1596033220015},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1596033220016},{"_id":"themes/butterfly/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1596033220017},{"_id":"themes/butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1596033220018},{"_id":"themes/butterfly/source/js/main.js","hash":"0e9e0f8e162e42100592383b3ef0d57b1a208740","modified":1596033220019},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"bdc74e8ddaa6966822dba0e642cd278d819c4c74","modified":1596033220025},{"_id":"themes/butterfly/source/js/utils.js","hash":"02e647fecbd78476925fb96762bd442ccfb8bd2f","modified":1596033220025},{"_id":"themes/butterfly/layout/includes/chat/chatra.pug","hash":"f42e02bb6cddea021d0f2a8c2181186506ce1796","modified":1596033219944},{"_id":"themes/butterfly/layout/includes/chat/daovoice.pug","hash":"6be9c4320f81ac818cd42d7b35e5035373f0eec4","modified":1596033219944},{"_id":"themes/butterfly/layout/includes/chat/gitter.pug","hash":"27afd01a1ac95fb0a8f0afcce084c0a88e713260","modified":1596033219945},{"_id":"themes/butterfly/layout/includes/chat/index.pug","hash":"fc636bbe089b93a58e482c265d3d4e8dd7a36582","modified":1596033219945},{"_id":"themes/butterfly/layout/includes/chat/tidio.pug","hash":"c00d323f3235576f98411785d4e70d58374bc55c","modified":1596033219946},{"_id":"themes/butterfly/layout/includes/comments/disqus.pug","hash":"5ae50a271fe5a49f4012555657db028b7113612b","modified":1596033219947},{"_id":"themes/butterfly/layout/includes/comments/disqusjs.pug","hash":"a35e7a7f6694bf3f11c7a2137ff244ec30bb71ba","modified":1596033219947},{"_id":"themes/butterfly/layout/includes/comments/facebook_comments.pug","hash":"9d4ed57b91ad520b95d220980add8477ce968618","modified":1596033219948},{"_id":"themes/butterfly/layout/includes/comments/gitalk.pug","hash":"bb4de1b40ae07b27dda4e3e529687f6c1a9196ca","modified":1596033219948},{"_id":"themes/butterfly/layout/includes/comments/index.pug","hash":"0c386937c41174df327d5b77c17395484b6006ac","modified":1596033219948},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"e613797213428031543952fd7ea262225c94013c","modified":1596033219952},{"_id":"themes/butterfly/layout/includes/comments/livere.pug","hash":"eb247e71b67f7ad53d519dd5776df92b198755e4","modified":1596033219949},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"036213b05df9e51250c2734854de7a096a9ed8c2","modified":1596033219953},{"_id":"themes/butterfly/layout/includes/comments/utterances.pug","hash":"8ef3dc1a27c19645ac054e30594ed1930b1c56f0","modified":1596033219949},{"_id":"themes/butterfly/layout/includes/head/aplayer.pug","hash":"eb18647e15acbf0f9faf9c56bc43cecc6c3069b1","modified":1596033219953},{"_id":"themes/butterfly/layout/includes/head/comment.pug","hash":"2dbb3378929e2f1ead3bbc4a88fafd72c6632ff8","modified":1596033219954},{"_id":"themes/butterfly/layout/includes/comments/valine.pug","hash":"c277f58fabe5fce8d24bfb47c66cbbdcd7fe613e","modified":1596033219950},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"ef72a6457c58c925ba4d8154f79a0ed5837d4903","modified":1596033219954},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"98e7f4d5609a7167826458a2c7c353082eb5b2a7","modified":1596033219954},{"_id":"themes/butterfly/layout/includes/head/darkmode.pug","hash":"7eba82bb9058c98285d2f2af889d6b8bc444668c","modified":1596033219955},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"393e641a35174f26318b8724eddaf1a0b1386636","modified":1596033219955},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"90bb6775573c78b337f809400246d475eed89564","modified":1596033219956},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"9f2bdadd5c8b8fd0cbe5256b54963d1617a2369f","modified":1596033219956},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"e4fb9e5c72ca05d595f0959893c2fe03b8f478e2","modified":1596033219957},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"2d267fcc926505fcc5ebc9f59146555b32654c7e","modified":1596033219957},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"499b85f6d68b9a7cd889a99e081cadb8c65c7354","modified":1596033219959},{"_id":"themes/butterfly/layout/includes/head/subtitle.pug","hash":"16a55d395fe74d31723b5b1c13ac391c05b6f6e6","modified":1596033219958},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"bc58b81f75c72c6b1178f16b3488b93d8a76c2b3","modified":1596033219959},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"330cf354ffbde0d7f24da1c65a2c08f3005e0c13","modified":1596033219960},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"c9f783639b9dccadf7692e6dab8ef1660d19c2b7","modified":1596033219960},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1596033219961},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"3a605e29a0607c315c0566f2a1c6487b4aa98140","modified":1596033219962},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1596033219962},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/index.pug","hash":"e9eacd936c259d8f10e1becdd6e3ca129ea0e942","modified":1596033219967},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/mobile-menus.pug","hash":"eaaf1ff602121b6e2a3df602eeb80c4047a5d2f3","modified":1596033219967},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"6cac73eb3f87e44e853eee3206f263c396e4b6a5","modified":1596033219966},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2eb98df02f2ff9cefeb6db0a6c681a3e8172e732","modified":1596033219965},{"_id":"themes/butterfly/layout/includes/math/index.pug","hash":"403601a903d02ef0a103d18909a6eb0b088fcb4c","modified":1596033219963},{"_id":"themes/butterfly/layout/includes/math/katex.pug","hash":"60bd18e051a442d5ce25325a55982922ab15be04","modified":1596033219963},{"_id":"themes/butterfly/layout/includes/math/mathjax.pug","hash":"9f10622c73c2c87d3502660eb933af654d2600b4","modified":1596033219964},{"_id":"themes/butterfly/layout/includes/math/mermaid.pug","hash":"41f6c6c9d753ed97ab2adef47f13595f8aebb464","modified":1596033219964},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"547a2737cd3ac45272a75561f5b5438d72d10f6d","modified":1596033219969},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"18ed72185fe1b95f7a70a01d0601fc1b7b800f2e","modified":1596033219969},{"_id":"themes/butterfly/layout/includes/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1596033219972},{"_id":"themes/butterfly/layout/includes/search/local-search.pug","hash":"f48686684bf322b3967fe6fa892e0b244d1394f8","modified":1596033219971},{"_id":"themes/butterfly/layout/includes/search/index.pug","hash":"66b4f4e8119e987cd3f9907298689a1408a05859","modified":1596033219971},{"_id":"themes/butterfly/layout/includes/search/algolia.pug","hash":"345280a843c43a6a600fcd74978ccba2354b7e7f","modified":1596033219970},{"_id":"themes/butterfly/layout/includes/share/addtoany.pug","hash":"4108ab6b91461254901f19ed3e5e082e437324aa","modified":1596033219972},{"_id":"themes/butterfly/layout/includes/share/index.pug","hash":"af2f09d374a55983d1ac695848ccfae50629f439","modified":1596033219973},{"_id":"themes/butterfly/layout/includes/share/share-js.pug","hash":"43643295be651fb3d2cd88ebf81544fde3131489","modified":1596033219973},{"_id":"themes/butterfly/layout/includes/third-party/canvas-nest.pug","hash":"3d7a3654ae03fd2665ea355ee9eac48af0ee82af","modified":1596033219974},{"_id":"themes/butterfly/layout/includes/third-party/canvas-ribbon-piao.pug","hash":"001f28c633d2ec2d5ef9ca047fb1fe61ffefd66f","modified":1596033219975},{"_id":"themes/butterfly/layout/includes/third-party/canvas-ribbon.pug","hash":"74fc2a62e125f28947ec9cd60f968023da766adb","modified":1596033219975},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"86f1c36a3092fdaae239cb7129526966b96c6cda","modified":1596033219976},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"44af3c7a67b86f048deacb451dd454b088631374","modified":1596033219976},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"7450c5bae8aa422c39504a3574f97ef1709d1779","modified":1596033219977},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"59d1096a1bb04c9559367d54d90186afcc115850","modified":1596033219977},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"ca4858ed872c43334f05ce0f444385529b677188","modified":1596033219978},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"40923d59c452d2a71195ddf1a8e3b840f27ef560","modified":1596033219978},{"_id":"themes/butterfly/layout/includes/widget/card_pixiv.pug","hash":"5144dafe6d0774a5f2260e9a4e2c4e676c35d388","modified":1596092721332},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e55f16e8aef805bc7c66eb3147394a83e1623476","modified":1596033219979},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"65597e263ca020622ce3947db97284ff3a871217","modified":1596033219979},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"cde114449d959e8e8d208eea584edc8c404e1759","modified":1596033219980},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"c939862ca4246b8cf0002eb7a14dc311758528b9","modified":1596093497245},{"_id":"themes/butterfly/source/css/_highlight/diff.styl","hash":"53e1765a4097369072d91be83cd5ea2461b29762","modified":1596033219993},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"6a0561b9cbc880224cdc57f1a59898bb8511711b","modified":1596033219992},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4f4dfc78cd11ece75db733940948a37bf4050c1d","modified":1596033219993},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"17598674ae0b2778b8e831b4e112ea4bf226e025","modified":1596033219994},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"011728deca7b8e7ffb7d5278f078bcfaa3407295","modified":1596033219995},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"88bfb709c6f0483b98ee1338c8169bba3c25a25c","modified":1596033219995},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"da4b18fe45ea6a771e1a53e138b8b69bf8399f94","modified":1596033219997},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1596033219997},{"_id":"themes/butterfly/source/css/_layout/category.styl","hash":"b5bca389c3185b2794939f0f5dd889e1ed72f6cc","modified":1596033219997},{"_id":"themes/butterfly/source/css/_layout/flink.styl","hash":"db112eff3c87857dc706ec8919a808dadb56f2e9","modified":1596033219997},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"2dace492e6da44e39ad5cc7eae8bc8bb5a34aaae","modified":1596033219999},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"48eae21acb25847794ca9094c73d295bd540e525","modified":1596033219999},{"_id":"themes/butterfly/source/css/_layout/loadding.styl","hash":"7acbbed062bf4070ef998e760491f436b2629738","modified":1596033219999},{"_id":"themes/butterfly/source/css/_layout/mobile-sidebar.styl","hash":"12cdf8e436bae03869b312e8353aa25e1c604161","modified":1596033219999},{"_id":"themes/butterfly/source/css/_layout/page.styl","hash":"613e1ec7ae7cb81d71a1284052a2d74b9b6bb48c","modified":1596033220000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"941bbc113732135cb691f1848a1d532856bb0c30","modified":1596033220000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"60b20a928c626d506934552fc435b71349c6864b","modified":1596033220002},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"31b0be8844fb29fcf6aa8e759bc58385f92253a0","modified":1596033220002},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d790cb4e120dede0b26ce7739da95ad556406dbf","modified":1596033220003},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"78c379d1abfc21fa921bebe88beff671486fbd38","modified":1596033220003},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"2f04e3e0ccfe26c38ad721dbb93521f1d38dd464","modified":1596033220004},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"7d51ea839eb824da07a450cc0ad0aef643e2a69d","modified":1596033220005},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"d1ad6bbdedf8bead2b0b18519629c731afbab49d","modified":1596033220004},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"4f1774d69ab9a0174739d8522a5b8c1bd0e582f7","modified":1596033220005},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"2f009c58a80e6ebd6e314fa7e0890246cbad4fab","modified":1596033220007},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"55fc3a91dfbd8f15aab2595fb0c68d3981edb629","modified":1596033220006},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"9e90117c80772ac4f45a97be685e7ab4c6b70a41","modified":1596033220006},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"0c293c8e72ec7e2432d46eef666b8db16ca6e826","modified":1596033220006},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7382e74fcfd711699dac91a504dc94898e5ecd6e","modified":1596033220008},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1596033220009},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"3a44135ebba2cc089869242d7f30c7e9219abeb5","modified":1596033220009},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"001bd6d68a9b9af5dd0158fe116889434f36b1fd","modified":1596033220011},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"82903068b1e50d7b326548fa628b55bf03d72536","modified":1596033220010},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"fd1ba8567c1b80777f0711d8a925d08d9a40d40b","modified":1596033220010},{"_id":"themes/butterfly/source/img/pwa/16.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1594869404428},{"_id":"themes/butterfly/source/img/pwa/apple-touch-icon.png","hash":"79f8efbce2c5c11228ae57079969e475495b59b8","modified":1595069590436},{"_id":"themes/butterfly/source/img/pwa/32.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1594869404428},{"_id":"themes/butterfly/source/img/pwa/manifest.json","hash":"a7430372f291258ece8865e5faa6a670633bcba7","modified":1596080304746},{"_id":"themes/butterfly/source/img/pwa/safari-pinned-tab.svg","hash":"0e7ccee870ace80eee544d9496c198d99bb99739","modified":1596079712919},{"_id":"themes/butterfly/source/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1596033220022},{"_id":"themes/butterfly/source/js/third-party/ClickShowText.js","hash":"2af6ddbabdd36979cc9c05b117452a1534702c6d","modified":1596033220021},{"_id":"themes/butterfly/source/js/third-party/canvas-ribbon.js","hash":"c345ea68e37caabe8d8f48af41837ccb86952cd5","modified":1596033220023},{"_id":"themes/butterfly/source/js/third-party/canvas-nest.js","hash":"ed2a7dedc314eb1047d030be2e95d0d5679bc577","modified":1596033220022},{"_id":"themes/butterfly/source/js/third-party/click_heart.js","hash":"7295ee03e9ae40f855d0c494a9b84e76a36ffe20","modified":1596033220023},{"_id":"themes/butterfly/source/js/third-party/fireworks.js","hash":"75b3d7025c01947f3d425e592e910458393ee621","modified":1596033220024},{"_id":"themes/butterfly/source/js/third-party/piao.js","hash":"bc3d3f2afeefea55d9d6ba8dfa798435e1eb1062","modified":1596033220024},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"9d38898a997e65127a65d7f286113b14af94ceba","modified":1596033220020},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"7ed0e03733127dd34dc251f5b36e3e7eadd73097","modified":1596033220020},{"_id":"themes/butterfly/source/img/pwa/pwaicons/144.png","hash":"79f8efbce2c5c11228ae57079969e475495b59b8","modified":1595069590436},{"_id":"themes/butterfly/source/img/pwa/pwaicons/36.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1594869404428},{"_id":"themes/butterfly/source/img/pwa/pwaicons/192.png","hash":"fbef572f5b5952e46f6c1aaf87973b08f7284d79","modified":1595069617857},{"_id":"themes/butterfly/source/img/pwa/pwaicons/48.png","hash":"13724cd485ca22ded04e891d94fc7b45d5b233da","modified":1595069530117},{"_id":"themes/butterfly/source/img/pwa/pwaicons/512.png","hash":"1d1fdcd8a2fa9de8139e8610f61ddb19803d578c","modified":1595069632838},{"_id":"themes/butterfly/source/img/pwa/pwaicons/72.png","hash":"8adb788c250e2d3eb0b8210ac63a9f10194933e9","modified":1595069548025},{"_id":"themes/butterfly/source/img/pwa/pwaicons/96.png","hash":"ec478cde77aa12ab4432929cb8d5ee443e601073","modified":1595069576537},{"_id":"public/search.xml","hash":"f23b3c7cd0763dc6307ac13cf1d64a1201823a24","modified":1596098251606},{"_id":"public/about/index.html","hash":"cfa1de28fc4fa5cf9d58d27a860a43b769d7c10f","modified":1596098251606},{"_id":"public/categories/index.html","hash":"43a3c02bdd39e393fbdde08a13db63c47a0ddaac","modified":1596098251606},{"_id":"public/gallery/index.html","hash":"ecd18d4fe323b7b4001f44f6d3a94858bcdf0c30","modified":1596098251606},{"_id":"public/bangumis/index.html","hash":"309ed7a16756d1720d28da5c855439abd4010989","modified":1596098251606},{"_id":"public/link/index.html","hash":"a59f40113ce231b609f7b8fe3455d5c3d456ee4f","modified":1596098251606},{"_id":"public/messageboard/index.html","hash":"b6996f235b7dc9ac7e6982f29ddd75b260f372ca","modified":1596098251606},{"_id":"public/music/index.html","hash":"95217717e4f4fa93ec921512b2a6a6bbeef9c7b1","modified":1596098251606},{"_id":"public/photos/index.html","hash":"b5f25f2f464c90c72e53bae10845ff1c7f641b26","modified":1596098251606},{"_id":"public/tags/index.html","hash":"8fba573162962acf48eb51427c3f00ccc3074b5d","modified":1596098251606},{"_id":"public/2020/07/30/hexo指令/index.html","hash":"dcf2dc8dc8b3c183337d975c5637efe953c8618a","modified":1596098251606},{"_id":"public/2020/07/29/CS61B-lecture10-11/index.html","hash":"ab80bec298f5179595402103b88dc4fe9fdac2ed","modified":1596098251606},{"_id":"public/2020/07/29/CS61B-lecture7，8，9/index.html","hash":"487069a45497355b21d3476cf48c78fb0a005be0","modified":1596098251606},{"_id":"public/2020/07/28/CS51B-lecture1-6/index.html","hash":"349c59eb00391a7d62e5e77d57cd7d5d9b0758b5","modified":1596098251606},{"_id":"public/2020/07/26/Git命令/index.html","hash":"ffd5af4d938d35c1a7622c123b7ba92daa951c9c","modified":1596098251606},{"_id":"public/books/index.html","hash":"c19493c0696ca390926618fb8c8a05adc68cda4b","modified":1596098251606},{"_id":"public/movies/index.html","hash":"8636d0bb5ec61ff3885b3b9f41356e518efdef85","modified":1596098251606},{"_id":"public/categories/Git/index.html","hash":"45c761d5f61eba58a470ee29caea0218e3c33cb1","modified":1596098251606},{"_id":"public/archives/index.html","hash":"69eee09d795bf5c24dc9b9120f49656a8a297265","modified":1596098251606},{"_id":"public/archives/2020/index.html","hash":"8064d913dce29d1414cfbff2a540d887f8727173","modified":1596098251606},{"_id":"public/archives/2020/07/index.html","hash":"5885bbc5ed83b0cde30bd000633fabb9fe1da78a","modified":1596098251606},{"_id":"public/index.html","hash":"ad2dc002d32a8f35003eb3aba981e1599dddda79","modified":1596098251606},{"_id":"public/tags/Git/index.html","hash":"cf92e18ccf380137bbb9568f94b3547a30aa86cc","modified":1596098251606},{"_id":"public/tags/笔记/index.html","hash":"742cd633369220d72244a9a66f7128f6758b052e","modified":1596098251606},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1596098251606},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1596098251606},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1596098251606},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1596098251606},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1596098251606},{"_id":"public/img/pwa/16.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1596098251606},{"_id":"public/img/pwa/32.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1596098251606},{"_id":"public/img/pwa/apple-touch-icon.png","hash":"79f8efbce2c5c11228ae57079969e475495b59b8","modified":1596098251606},{"_id":"public/img/pwa/safari-pinned-tab.svg","hash":"0e7ccee870ace80eee544d9496c198d99bb99739","modified":1596098251606},{"_id":"public/img/pwa/pwaicons/144.png","hash":"79f8efbce2c5c11228ae57079969e475495b59b8","modified":1596098251606},{"_id":"public/img/pwa/pwaicons/36.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1596098251606},{"_id":"public/img/pwa/pwaicons/48.png","hash":"13724cd485ca22ded04e891d94fc7b45d5b233da","modified":1596098251606},{"_id":"public/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1596098251606},{"_id":"public/img/pwa/pwaicons/512.png","hash":"1d1fdcd8a2fa9de8139e8610f61ddb19803d578c","modified":1596098251606},{"_id":"public/img/pwa/pwaicons/192.png","hash":"fbef572f5b5952e46f6c1aaf87973b08f7284d79","modified":1596098251606},{"_id":"public/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1596098251606},{"_id":"public/img/pwa/pwaicons/96.png","hash":"ec478cde77aa12ab4432929cb8d5ee443e601073","modified":1596098251606},{"_id":"public/img/pwa/pwaicons/72.png","hash":"8adb788c250e2d3eb0b8210ac63a9f10194933e9","modified":1596098251606},{"_id":"public/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1596098251606},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1596098251606},{"_id":"public/css/index.css","hash":"492eef8b341f8b31eb6a971ea09e6396e975bca4","modified":1596098251606},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596098251606},{"_id":"public/js/utils.js","hash":"43da5a9129aa827dc5c311b0e5e3a12ccc61b488","modified":1596098251606},{"_id":"public/img/pwa/manifest.json","hash":"e55125c43980cdf21abcb75f0b4ecea6a473c983","modified":1596098251606},{"_id":"public/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1596098251606},{"_id":"public/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1596098251606},{"_id":"public/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1596098251606},{"_id":"public/js/search/algolia.js","hash":"5ff5cb40d5ede73b48594d331244ada001154dac","modified":1596098251606},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"1ddf4f6896175e77518f0fbd45776132b2954fb6","modified":1596098251606},{"_id":"public/js/search/local-search.js","hash":"497993860b3c42bdc926a3bd83b4b8f480febd99","modified":1596098251606},{"_id":"public/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1596098251606},{"_id":"public/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1596098251606},{"_id":"public/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1596098251606},{"_id":"public/js/main.js","hash":"71c958b954ec9c1d050c86e285f2a8192f5f5c00","modified":1596098251606},{"_id":"public/js/tw_cn.js","hash":"030ad26843c22f6a5f91a40200c65d079a4f8475","modified":1596098251606}],"Category":[{"name":"Git","_id":"ckd8joume0009f0tzgkma3cgr"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"about","date":"2020-06-29T08:42:15.000Z","_content":"\n大二CS在读，坐标俄亥俄\n\n关于吃喝玩乐的技能已全部点满，嘿嘿嘿...\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-06-29 16:42:15\n---\n\n大二CS在读，坐标俄亥俄\n\n关于吃喝玩乐的技能已全部点满，嘿嘿嘿...\n\n","updated":"2020-07-15T03:38:38.155Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckd8joum30000f0tz4h0zdsjw","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>大二CS在读，坐标俄亥俄</p>\n<p>关于吃喝玩乐的技能已全部点满，嘿嘿嘿…</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s1.ax1x.com/2020/07/18/U2sqXV.jpg","excerpt":"","more":"<p>大二CS在读，坐标俄亥俄</p>\n<p>关于吃喝玩乐的技能已全部点满，嘿嘿嘿…</p>\n"},{"title":"分类","date":"2018-01-04T16:00:00.000Z","type":"categories","_content":"\n\n","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---\n\n\n","updated":"2020-07-30T00:32:33.069Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckd8joum80002f0tz2ap9dhs1","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s1.ax1x.com/2020/07/18/U2sqXV.jpg","excerpt":"","more":""},{"title":"Gallery","date":"2018-01-04T16:00:00.000Z","type":"gallery","_content":"{% gallery %}\n![URKs54.jpg](https://s1.ax1x.com/2020/07/19/URKs54.jpg)\n![URKraF.jpg](https://s1.ax1x.com/2020/07/19/URKraF.jpg)\n![URKDVU.jpg](https://s1.ax1x.com/2020/07/19/URKDVU.jpg)\n![URKwrV.jpg](https://s1.ax1x.com/2020/07/19/URKwrV.jpg)\n![URKdK0.jpg](https://s1.ax1x.com/2020/07/19/URKdK0.jpg)\n![URK8Ug.jpg](https://s1.ax1x.com/2020/07/19/URK8Ug.jpg)\n![URK3VS.jpg](https://s1.ax1x.com/2020/07/19/URK3VS.jpg)\n![URKQDf.jpg](https://s1.ax1x.com/2020/07/19/URKQDf.jpg)\n![URKm8A.jpg](https://s1.ax1x.com/2020/07/19/URKm8A.jpg)\n![URKeCd.jpg](https://s1.ax1x.com/2020/07/19/URKeCd.jpg)\n![URKV4H.jpg](https://s1.ax1x.com/2020/07/19/URKV4H.jpg)\n![URKEUe.jpg](https://s1.ax1x.com/2020/07/19/URKEUe.jpg)\n![UBh7mF.jpg](https://s1.ax1x.com/2020/07/16/UBh7mF.jpg)\n![Ud8S6H.jpg](https://s1.ax1x.com/2020/07/15/Ud8S6H.jpg)\n![Ud3z1e.jpg](https://s1.ax1x.com/2020/07/15/Ud3z1e.jpg)\n![Ud3jfO.jpg](https://s1.ax1x.com/2020/07/15/Ud3jfO.jpg)\n![Ud3XtK.jpg](https://s1.ax1x.com/2020/07/15/Ud3XtK.jpg)\n![Ud3b01.jpg](https://s1.ax1x.com/2020/07/15/Ud3b01.jpg)\n![Ud3HmR.jpg](https://s1.ax1x.com/2020/07/15/Ud3HmR.jpg)\n{% endgallery %}","source":"gallery/index.md","raw":"---\ntitle: Gallery\ndate: 2018-01-05 00:00:00\ntype: \"gallery\"\n---\n{% gallery %}\n![URKs54.jpg](https://s1.ax1x.com/2020/07/19/URKs54.jpg)\n![URKraF.jpg](https://s1.ax1x.com/2020/07/19/URKraF.jpg)\n![URKDVU.jpg](https://s1.ax1x.com/2020/07/19/URKDVU.jpg)\n![URKwrV.jpg](https://s1.ax1x.com/2020/07/19/URKwrV.jpg)\n![URKdK0.jpg](https://s1.ax1x.com/2020/07/19/URKdK0.jpg)\n![URK8Ug.jpg](https://s1.ax1x.com/2020/07/19/URK8Ug.jpg)\n![URK3VS.jpg](https://s1.ax1x.com/2020/07/19/URK3VS.jpg)\n![URKQDf.jpg](https://s1.ax1x.com/2020/07/19/URKQDf.jpg)\n![URKm8A.jpg](https://s1.ax1x.com/2020/07/19/URKm8A.jpg)\n![URKeCd.jpg](https://s1.ax1x.com/2020/07/19/URKeCd.jpg)\n![URKV4H.jpg](https://s1.ax1x.com/2020/07/19/URKV4H.jpg)\n![URKEUe.jpg](https://s1.ax1x.com/2020/07/19/URKEUe.jpg)\n![UBh7mF.jpg](https://s1.ax1x.com/2020/07/16/UBh7mF.jpg)\n![Ud8S6H.jpg](https://s1.ax1x.com/2020/07/15/Ud8S6H.jpg)\n![Ud3z1e.jpg](https://s1.ax1x.com/2020/07/15/Ud3z1e.jpg)\n![Ud3jfO.jpg](https://s1.ax1x.com/2020/07/15/Ud3jfO.jpg)\n![Ud3XtK.jpg](https://s1.ax1x.com/2020/07/15/Ud3XtK.jpg)\n![Ud3b01.jpg](https://s1.ax1x.com/2020/07/15/Ud3b01.jpg)\n![Ud3HmR.jpg](https://s1.ax1x.com/2020/07/15/Ud3HmR.jpg)\n{% endgallery %}","updated":"2020-07-30T07:29:26.793Z","path":"gallery/index.html","comments":1,"layout":"page","_id":"ckd8jouma0004f0tza1pq6gmu","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><div class=\"justified-gallery\"><p><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/19/URKs54.jpg\" alt=\"URKs54.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/19/URKraF.jpg\" alt=\"URKraF.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/19/URKDVU.jpg\" alt=\"URKDVU.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/19/URKwrV.jpg\" alt=\"URKwrV.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/19/URKdK0.jpg\" alt=\"URKdK0.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/19/URK8Ug.jpg\" alt=\"URK8Ug.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/19/URK3VS.jpg\" alt=\"URK3VS.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/19/URKQDf.jpg\" alt=\"URKQDf.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/19/URKm8A.jpg\" alt=\"URKm8A.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/19/URKeCd.jpg\" alt=\"URKeCd.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/19/URKV4H.jpg\" alt=\"URKV4H.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/19/URKEUe.jpg\" alt=\"URKEUe.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/16/UBh7mF.jpg\" alt=\"UBh7mF.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/15/Ud8S6H.jpg\" alt=\"Ud8S6H.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/15/Ud3z1e.jpg\" alt=\"Ud3z1e.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/15/Ud3jfO.jpg\" alt=\"Ud3jfO.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/15/Ud3XtK.jpg\" alt=\"Ud3XtK.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/15/Ud3b01.jpg\" alt=\"Ud3b01.jpg\"><br><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/15/Ud3HmR.jpg\" alt=\"Ud3HmR.jpg\"></p>\n          </div>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s1.ax1x.com/2020/07/18/U2sqXV.jpg","excerpt":"","more":"<div class=\"justified-gallery\"><p><img src=\"https://s1.ax1x.com/2020/07/19/URKs54.jpg\" alt=\"URKs54.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/19/URKraF.jpg\" alt=\"URKraF.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/19/URKDVU.jpg\" alt=\"URKDVU.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/19/URKwrV.jpg\" alt=\"URKwrV.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/19/URKdK0.jpg\" alt=\"URKdK0.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/19/URK8Ug.jpg\" alt=\"URK8Ug.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/19/URK3VS.jpg\" alt=\"URK3VS.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/19/URKQDf.jpg\" alt=\"URKQDf.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/19/URKm8A.jpg\" alt=\"URKm8A.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/19/URKeCd.jpg\" alt=\"URKeCd.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/19/URKV4H.jpg\" alt=\"URKV4H.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/19/URKEUe.jpg\" alt=\"URKEUe.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/16/UBh7mF.jpg\" alt=\"UBh7mF.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/15/Ud8S6H.jpg\" alt=\"Ud8S6H.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/15/Ud3z1e.jpg\" alt=\"Ud3z1e.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/15/Ud3jfO.jpg\" alt=\"Ud3jfO.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/15/Ud3XtK.jpg\" alt=\"Ud3XtK.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/15/Ud3b01.jpg\" alt=\"Ud3b01.jpg\"><br><img src=\"https://s1.ax1x.com/2020/07/15/Ud3HmR.jpg\" alt=\"Ud3HmR.jpg\"></p>\n          </div>"},{"title":"bangumis","date":"2018-01-04T16:00:00.000Z","top_img":"https://s1.ax1x.com/2020/07/30/auRkQ0.jpg","type":"bangumis","_content":"","source":"bangumis/index.md","raw":"---\ntitle: bangumis\ndate: 2018-01-05 00:00:00\ntop_img: https://s1.ax1x.com/2020/07/30/auRkQ0.jpg\ntype: \"bangumis\"\n---","updated":"2020-07-30T07:51:49.523Z","path":"bangumis/index.html","comments":1,"layout":"page","_id":"ckd8joumc0006f0tz43wb2w49","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s1.ax1x.com/2020/07/18/U2sqXV.jpg","excerpt":"","more":""},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","type":"link","_content":"\n","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2018-06-07 22:17:49\ntype: \"link\"\n---\n\n","updated":"2020-07-30T02:48:47.882Z","path":"link/index.html","comments":1,"layout":"page","_id":"ckd8joumd0008f0tz8zi3fsa6","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s1.ax1x.com/2020/07/18/U2sqXV.jpg","excerpt":"","more":""},{"title":"留下你的想法~","date":"2018-01-04T16:00:00.000Z","_content":"","source":"messageboard/index.md","raw":"---\ntitle: 留下你的想法~\ndate: 2018-01-05 00:00:00\n---\n","updated":"2020-07-16T03:30:05.698Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"ckd8joumg000bf0tz0q5b96y3","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s1.ax1x.com/2020/07/18/U2sqXV.jpg","excerpt":"","more":""},{"title":"我的歌单","date":"2019-05-17T08:14:00.000Z","top_img":"https://s1.ax1x.com/2020/07/30/auRkQ0.jpg","type":"music","_content":"\n<font color=#0c74d6 size=3 face=\"黑体\">****</font>\n\n{% meting \"697054881\" \"netease\" \"playlist\" %}\n","source":"music/index.md","raw":"---\ntitle: 我的歌单\ndate: 2019-05-17 16:14:00\ntop_img: https://s1.ax1x.com/2020/07/30/auRkQ0.jpg\ntype: \"music\"\n---\n\n<font color=#0c74d6 size=3 face=\"黑体\">****</font>\n\n{% meting \"697054881\" \"netease\" \"playlist\" %}\n","updated":"2020-07-30T07:40:05.316Z","path":"music/index.html","comments":1,"layout":"page","_id":"ckd8joumg000cf0tz3lfc4cg3","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p><font color=#0c74d6 size=3 face=\"黑体\">****</font></p>\n\n    <div id=\"aplayer-tmtaAhDG\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"697054881\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"\n    ></div>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s1.ax1x.com/2020/07/18/U2sqXV.jpg","excerpt":"","more":"<p><font color=#0c74d6 size=3 face=\"黑体\">****</font></p>\n\n    <div id=\"aplayer-tmtaAhDG\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"697054881\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"\n    ></div>\n"},{"title":"我拍过的回忆","date":"2018-01-04T16:00:00.000Z","_content":"","source":"photos/index.md","raw":"---\ntitle: 我拍过的回忆\ndate: 2018-01-05 00:00:00\n---","updated":"2020-07-16T03:31:31.895Z","path":"photos/index.html","comments":1,"layout":"page","_id":"ckd8joumh000df0tz10tg4e6t","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s1.ax1x.com/2020/07/18/U2sqXV.jpg","excerpt":"","more":""},{"title":"标籤","date":"2018-01-04T16:00:00.000Z","type":"tags","_content":"\n\n","source":"tags/index.md","raw":"---\ntitle: 标籤\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\n---\n\n\n","updated":"2020-07-30T00:32:08.166Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckd8joumi000ff0tz2thp21pa","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s1.ax1x.com/2020/07/18/U2sqXV.jpg","excerpt":"","more":""}],"Post":[{"title":"CS51B-lecture1-6","date":"2020-07-28T12:03:51.000Z","keywords":null,"description":null,"cover":"https://s1.ax1x.com/2020/07/18/U2sqXV.jpg","_content":"# 课程大纲\n## Phase 1: Programming Intensive Introduction to Java. \nWeeks 1-4.\nOne browser-based programming HW (this HW0 is optional).\nThree labs to introduce you to various tools (starting this week).\nTwo projects (proj0 and proj1).\n\n## Phase 2: Advanced Programming\nWeeks 5-7.\nOne small HW (HW1).\nOne large project, due ~3/5.\nNew: You design your own explorable world (within some constraints).\nLabs to support large project.\n\n## Phase 3: Data Structures and Algorithms\nWeeks 8-14\nIncredibly important and foundational material: Expect an CS job interview to lean heavily on this part of the course.\nLabs: Implement a data structure or algorithm.\nEach lab ends with a TA led discussion of best implementation.\nSix HWs: Apply a data structure or algorithm toward a real world problem.\nTwo released during RRR week. Can be used to makeup missed homeworks earlier, or for practice.\nOne very challenging data structure/algorithms project (but not as big as project 2).\n\nSee calendar at http://datastructur.es for more.\n\n# static 和 non-static\n## 静态和实例方法：\n \n**静态方法只能使用静态变量，同时可以直接通过类名来调动（不推荐通过对象）\n  实例方法可以调动实例变量，同时只能通过对象来调动**\n\n## 静态和实例变量：\n**静态变量为所有该类的对象共用，实例变量不会互相影响**\n\n## static 和 non-static混合调用\n```\npublic static Dog maxDog(Dog d1, Dog d2) {\n\tif (d1.weightInPounds > d2.weightInPounds) {\n   \t\treturn d1;\n\t}\n\treturn d2;\n}\n```\n\n# String[] args(命令行参数)\n例如：\n```\n/**打印命令行参数的第零个*/\npublic class ArgsDemo {\n    public static void main(String[] args) {\n        System.out.println(args[0]);\n    }\n}\n```\n**命令行：**\n其中java ArgsDemo是用于运行已编译好的class文件，后面的内容是命令行参数，以空格分隔。第零个是these。\n```\n$ java ArgsDemo these are command line arguments\nthese\n```\n# Library\n## Library Documentation Example\n\n![aZdYsP.png](https://s1.ax1x.com/2020/07/29/aZdYsP.png)\n\n# Declaring a Variable\n声明一个int变量，生成32位的box\n声明一个double变量，生成64位的box\n\n## Types\nThere are 8 primitive types in Java: \nbyte, short, int, long, float, double, boolean, char\n\nEverything else, including arrays, is a reference type.\n当声明一个reference type变量\nThese bits can be either set to:\n- Null (all zeros).\n- The 64 bit “address” of a specific instance of that class (returned by new).\n\nThe golden rule:\nb = a copies the bits from a into b.\nPassing parameters copies the bits.\n\n# Declaration and Instantiation of Arrays\n`int[] x = new int[]{0, 1, 2, 95, 4};`\n\n\n#  SLList(单向列表)\n\n## 改进前\n```\npublic class IntList {\n   public int first;\n   public IntList rest;\n \n   public IntList(int f, IntList r) {\n      first = f;\n      rest = r;\n   }\n```\n\n## 改进后\n```\npublic class SLList {\n    public static class IntNode {\n        public int item;\n        public IntNode next;\n        public IntNode(int i, IntNode n) {\n            item = i;\n            next = n;\n        }\n    }\n    \n    private IntNode sentinel;\n    private int size;\n\n    public SLList() {\n        sentinel = new (63, null)\n        size = 0;\n    }\n    \n    public SLList(int x) {\n        sentinel = new IntNode(63, null);\n        sentinel.next = new IntNode(x, null);\n        size = 1;\n    }\n\n    public void addFirst(int x) {\n        sentinel.next = new IntNode(x, sentinel.next);\n        size += 1;\n    }\n    \n    public int getFirst() {\n        return sentinel.next.item;\n    }\n\n    public int size() {\n        return size;\n    }\n\n    public void addLast(int x) {\n        size += 1;\n        IntNode p = sentinel;\n        while (p.next != null) {\n           p = p.next;\n        }\n        p.next = new IntNode(x, null);\n    }\n}\n\n\n\n```\n\n\n## 改进步骤\nMethods | | Non-Obvious Improvements\n--- | --- | --- \naddFirst(int x) | #1 | Rebranding: IntList → IntNode\ngetFirst | #2 | Bureaucracy: SLList \nsize | #3 | Access Control: public → private\naddLast(int x) | #4 | Nested Class: Bringing IntNode into SLList\n|  | #5 | Caching: Saving size as an int.\n| |  #6 | Generalizing: Adding a sentinel node to allow representation of the empty list.\n\n## 第六步-哨兵节点\n使SLList有一个哨兵节点，而哨兵节点可以指向`null`或者`第一个节点`\n### 作用\n防止当列表为空时，无法用`first.method()`调用方法\n\n\n## 缺陷\nInserting at the back of an SLList is much slower than the front.\n\n#  DLList(双向列表)\n\n## 改进一\n增加`last`，指向最后一个节点\n### 缺陷\n对于倒数第二个节点来说还要重新遍历一遍\n## 改进二\n使所有节点变成双向的\n## 改进三\n### 方案一 \n增加一个指向`last`哨兵节点在开始时和指向`first`的哨兵节点互相指向\n原因：last参数可能指向将要指向`first`的哨兵节点\n\n### 方案二\n使最后一个节点重新指向将要指向`first`节点的哨兵节点\n\n# Generic Lists (加入泛型)\n\n## ALList和DLList的缺陷\nOne issue with our list classes: They only supports integers.\n\n## 泛型使用的法则\n\n### 类编写\n类名之后使用<>指定一次通用类型名\n```\npublic class DLList<T> {\n    private IntNode sentinel;\n    private int size;\n\n    public class IntNode {\n        public IntNode prev;\n        public T item;\n        public IntNode next;\n        ...\n    }\n    ...\n}\n```\n### 声明时使用\n在声明时在<>中指定一次特定的所需类型，并在实例化时使用空的<>\n```\nDLList<String> d2 = new DLList<>(\"hello\");\nd2.addLast(\"world\");\n```\n\n### 实例化一个普通的基本类型\n使用Integer，Double，Character，Boolean，Long，Short，Byte，或Float。\n\n# Arrays\nThree valid notations:\nx = new int[3];\ny = new int[]{1, 2, 3, 4, 5};\nint[] z = {9, 10, 11, 12, 13};\n## Two ways to copy arrays\n- Item by item using a loop.\n- Using `System.arraycopy(b, 0, x, 3, 2)` Takes 5 parameters:\n    - Source array\n    - Start position in source\n    - Target array\n    - Start position in target\n    - Number to copy \n\n# 2D arrays(二维数组)\n## 声明\n```\nint[][] x = new int[3][];\n\\\\这将为x创建一个64bits的内存盒用于存储地址，和三个64bits的内存盒用于存储指向下一层数组（长度未确定）的地址。\nint[][] y = new int [][]{{1}, {1, 1}, {1, 2, 1}, {1, 3, 3, 1}};;\nint[][] z = {{1}, {1, 1}, {1, 2, 1}, {1, 3, 3, 1}};;\n```\n\n## 练习\n```\nint[][] pascalsTriangle;\npascalsTriangle = new int[4][];\nint[] rowZero = pascalsTriangle[0];\n\npascalsTriangle[0] = new int[]{1};\npascalsTriangle[1] = new int[]{1, 1};\npascalsTriangle[2] = new int[]{1, 2, 1};\npascalsTriangle[3] = new int[]{1, 3, 3, 1};\nint[] rowTwo = pascalsTriangle[2];\n```\n## 总结\n`int[][] x = new int[n][];`\n声明一个叫x的数组，数组的`size`为n，每个位置可以指向一个int数组\n## 注意\n数组中所存贮的数据类型必须一致\n\n# Naive Array Lists(数组列表)\n## 使用数组列表需要注意的事项\n- he position of the next item to be inserted is always size.\n- size is always the number of items in the AList.\n- The last item in the list is always in position size - 1.\n\n```\npublic class AList {\n  private int[] items;    \n  private int size;\n \n  public AList() {\n    items = new int[100];  size = 0;\n  }\n \n  public void addLast(int x) {\n    items[size] = x;\n    size += 1;\n  }\n \n  public int getLast() {\n    return items[size - 1];\n  }\n \n  public int get(int i) {\n    return items[i];\n  }\n\n  public int size() {\n    return size;\n  }\n}\n```\n```\npublic int removeLast() {\n  int returnItem = items[size - 1];\n  items[size - 1] = 0;\n  size -= 1;  \t\n  return returnItem;\n}    \n\n```\n## resizing\n```\nprivate void resize(int capacity) {\n  int[] a = new int[capacity];\n  System.arraycopy(items, 0, a, 0, size);\n  items = a;\n}\n \npublic void addLast(int x) {\n  if (size == items.length) {\n\tresize(size + 1);\n  }\n  items[size] = x;\n  size += 1;\n}\n\n```\n\n### 改进使得节省内存（减少resize的次数）\n```\npublic void addLast(int x) {\n  if (size == items.length) {\n\tresize(size * RFACTOR);\n  }\n  items[size] = x;\n  size += 1;\n}\n```\n### 改进-优化内存\n- Define the “usage ratio” R = size / items.length;\n- Typical solution: Half array size when R < 0.25.\n\n### 泛型数组列表\n```\npublic class AList<Glorp> {\n  private Glorp[] items;    \n  private int size;\n \n  public AList() {\n    items = (Glorp []) new Object[8];  \n    size = 0;\n  }\n \n  private void resize(int cap) {\n    Glorp[] a = (Glorp []) new Object[cap];\n    System.arraycopy(items, 0, \n                     a, 0, size);\n    items = a;\n  }\n\n  public Glorp get(int i) {\n    return items[i];\n  }\n...\n\n```\n### deleteback 方法\n```\npublic Glorp deleteBack() {\n  Glorp returnItem = getBack();\n  items[size - 1] = null;\n  size -= 1;  \t\n  return returnItem;\n}\n```\n**注意： \nJava only destroys unwanted objects when the last reference has been lost.**\n\n- **新名词：**`loiter`\n    - Keeping references to unneeded objects is sometimes called loitering.\n    - Save memory. Don’t loiter.\n\n    \n\n\n\n\n\n\n","source":"_posts/CS51B-lecture1-6.md","raw":"---\ntitle: CS51B-lecture1-6\ndate: 2020-07-28 20:03:51\ntags:\ncategories:\nkeywords:\ndescription:\ncover: https://s1.ax1x.com/2020/07/18/U2sqXV.jpg\n---\n# 课程大纲\n## Phase 1: Programming Intensive Introduction to Java. \nWeeks 1-4.\nOne browser-based programming HW (this HW0 is optional).\nThree labs to introduce you to various tools (starting this week).\nTwo projects (proj0 and proj1).\n\n## Phase 2: Advanced Programming\nWeeks 5-7.\nOne small HW (HW1).\nOne large project, due ~3/5.\nNew: You design your own explorable world (within some constraints).\nLabs to support large project.\n\n## Phase 3: Data Structures and Algorithms\nWeeks 8-14\nIncredibly important and foundational material: Expect an CS job interview to lean heavily on this part of the course.\nLabs: Implement a data structure or algorithm.\nEach lab ends with a TA led discussion of best implementation.\nSix HWs: Apply a data structure or algorithm toward a real world problem.\nTwo released during RRR week. Can be used to makeup missed homeworks earlier, or for practice.\nOne very challenging data structure/algorithms project (but not as big as project 2).\n\nSee calendar at http://datastructur.es for more.\n\n# static 和 non-static\n## 静态和实例方法：\n \n**静态方法只能使用静态变量，同时可以直接通过类名来调动（不推荐通过对象）\n  实例方法可以调动实例变量，同时只能通过对象来调动**\n\n## 静态和实例变量：\n**静态变量为所有该类的对象共用，实例变量不会互相影响**\n\n## static 和 non-static混合调用\n```\npublic static Dog maxDog(Dog d1, Dog d2) {\n\tif (d1.weightInPounds > d2.weightInPounds) {\n   \t\treturn d1;\n\t}\n\treturn d2;\n}\n```\n\n# String[] args(命令行参数)\n例如：\n```\n/**打印命令行参数的第零个*/\npublic class ArgsDemo {\n    public static void main(String[] args) {\n        System.out.println(args[0]);\n    }\n}\n```\n**命令行：**\n其中java ArgsDemo是用于运行已编译好的class文件，后面的内容是命令行参数，以空格分隔。第零个是these。\n```\n$ java ArgsDemo these are command line arguments\nthese\n```\n# Library\n## Library Documentation Example\n\n![aZdYsP.png](https://s1.ax1x.com/2020/07/29/aZdYsP.png)\n\n# Declaring a Variable\n声明一个int变量，生成32位的box\n声明一个double变量，生成64位的box\n\n## Types\nThere are 8 primitive types in Java: \nbyte, short, int, long, float, double, boolean, char\n\nEverything else, including arrays, is a reference type.\n当声明一个reference type变量\nThese bits can be either set to:\n- Null (all zeros).\n- The 64 bit “address” of a specific instance of that class (returned by new).\n\nThe golden rule:\nb = a copies the bits from a into b.\nPassing parameters copies the bits.\n\n# Declaration and Instantiation of Arrays\n`int[] x = new int[]{0, 1, 2, 95, 4};`\n\n\n#  SLList(单向列表)\n\n## 改进前\n```\npublic class IntList {\n   public int first;\n   public IntList rest;\n \n   public IntList(int f, IntList r) {\n      first = f;\n      rest = r;\n   }\n```\n\n## 改进后\n```\npublic class SLList {\n    public static class IntNode {\n        public int item;\n        public IntNode next;\n        public IntNode(int i, IntNode n) {\n            item = i;\n            next = n;\n        }\n    }\n    \n    private IntNode sentinel;\n    private int size;\n\n    public SLList() {\n        sentinel = new (63, null)\n        size = 0;\n    }\n    \n    public SLList(int x) {\n        sentinel = new IntNode(63, null);\n        sentinel.next = new IntNode(x, null);\n        size = 1;\n    }\n\n    public void addFirst(int x) {\n        sentinel.next = new IntNode(x, sentinel.next);\n        size += 1;\n    }\n    \n    public int getFirst() {\n        return sentinel.next.item;\n    }\n\n    public int size() {\n        return size;\n    }\n\n    public void addLast(int x) {\n        size += 1;\n        IntNode p = sentinel;\n        while (p.next != null) {\n           p = p.next;\n        }\n        p.next = new IntNode(x, null);\n    }\n}\n\n\n\n```\n\n\n## 改进步骤\nMethods | | Non-Obvious Improvements\n--- | --- | --- \naddFirst(int x) | #1 | Rebranding: IntList → IntNode\ngetFirst | #2 | Bureaucracy: SLList \nsize | #3 | Access Control: public → private\naddLast(int x) | #4 | Nested Class: Bringing IntNode into SLList\n|  | #5 | Caching: Saving size as an int.\n| |  #6 | Generalizing: Adding a sentinel node to allow representation of the empty list.\n\n## 第六步-哨兵节点\n使SLList有一个哨兵节点，而哨兵节点可以指向`null`或者`第一个节点`\n### 作用\n防止当列表为空时，无法用`first.method()`调用方法\n\n\n## 缺陷\nInserting at the back of an SLList is much slower than the front.\n\n#  DLList(双向列表)\n\n## 改进一\n增加`last`，指向最后一个节点\n### 缺陷\n对于倒数第二个节点来说还要重新遍历一遍\n## 改进二\n使所有节点变成双向的\n## 改进三\n### 方案一 \n增加一个指向`last`哨兵节点在开始时和指向`first`的哨兵节点互相指向\n原因：last参数可能指向将要指向`first`的哨兵节点\n\n### 方案二\n使最后一个节点重新指向将要指向`first`节点的哨兵节点\n\n# Generic Lists (加入泛型)\n\n## ALList和DLList的缺陷\nOne issue with our list classes: They only supports integers.\n\n## 泛型使用的法则\n\n### 类编写\n类名之后使用<>指定一次通用类型名\n```\npublic class DLList<T> {\n    private IntNode sentinel;\n    private int size;\n\n    public class IntNode {\n        public IntNode prev;\n        public T item;\n        public IntNode next;\n        ...\n    }\n    ...\n}\n```\n### 声明时使用\n在声明时在<>中指定一次特定的所需类型，并在实例化时使用空的<>\n```\nDLList<String> d2 = new DLList<>(\"hello\");\nd2.addLast(\"world\");\n```\n\n### 实例化一个普通的基本类型\n使用Integer，Double，Character，Boolean，Long，Short，Byte，或Float。\n\n# Arrays\nThree valid notations:\nx = new int[3];\ny = new int[]{1, 2, 3, 4, 5};\nint[] z = {9, 10, 11, 12, 13};\n## Two ways to copy arrays\n- Item by item using a loop.\n- Using `System.arraycopy(b, 0, x, 3, 2)` Takes 5 parameters:\n    - Source array\n    - Start position in source\n    - Target array\n    - Start position in target\n    - Number to copy \n\n# 2D arrays(二维数组)\n## 声明\n```\nint[][] x = new int[3][];\n\\\\这将为x创建一个64bits的内存盒用于存储地址，和三个64bits的内存盒用于存储指向下一层数组（长度未确定）的地址。\nint[][] y = new int [][]{{1}, {1, 1}, {1, 2, 1}, {1, 3, 3, 1}};;\nint[][] z = {{1}, {1, 1}, {1, 2, 1}, {1, 3, 3, 1}};;\n```\n\n## 练习\n```\nint[][] pascalsTriangle;\npascalsTriangle = new int[4][];\nint[] rowZero = pascalsTriangle[0];\n\npascalsTriangle[0] = new int[]{1};\npascalsTriangle[1] = new int[]{1, 1};\npascalsTriangle[2] = new int[]{1, 2, 1};\npascalsTriangle[3] = new int[]{1, 3, 3, 1};\nint[] rowTwo = pascalsTriangle[2];\n```\n## 总结\n`int[][] x = new int[n][];`\n声明一个叫x的数组，数组的`size`为n，每个位置可以指向一个int数组\n## 注意\n数组中所存贮的数据类型必须一致\n\n# Naive Array Lists(数组列表)\n## 使用数组列表需要注意的事项\n- he position of the next item to be inserted is always size.\n- size is always the number of items in the AList.\n- The last item in the list is always in position size - 1.\n\n```\npublic class AList {\n  private int[] items;    \n  private int size;\n \n  public AList() {\n    items = new int[100];  size = 0;\n  }\n \n  public void addLast(int x) {\n    items[size] = x;\n    size += 1;\n  }\n \n  public int getLast() {\n    return items[size - 1];\n  }\n \n  public int get(int i) {\n    return items[i];\n  }\n\n  public int size() {\n    return size;\n  }\n}\n```\n```\npublic int removeLast() {\n  int returnItem = items[size - 1];\n  items[size - 1] = 0;\n  size -= 1;  \t\n  return returnItem;\n}    \n\n```\n## resizing\n```\nprivate void resize(int capacity) {\n  int[] a = new int[capacity];\n  System.arraycopy(items, 0, a, 0, size);\n  items = a;\n}\n \npublic void addLast(int x) {\n  if (size == items.length) {\n\tresize(size + 1);\n  }\n  items[size] = x;\n  size += 1;\n}\n\n```\n\n### 改进使得节省内存（减少resize的次数）\n```\npublic void addLast(int x) {\n  if (size == items.length) {\n\tresize(size * RFACTOR);\n  }\n  items[size] = x;\n  size += 1;\n}\n```\n### 改进-优化内存\n- Define the “usage ratio” R = size / items.length;\n- Typical solution: Half array size when R < 0.25.\n\n### 泛型数组列表\n```\npublic class AList<Glorp> {\n  private Glorp[] items;    \n  private int size;\n \n  public AList() {\n    items = (Glorp []) new Object[8];  \n    size = 0;\n  }\n \n  private void resize(int cap) {\n    Glorp[] a = (Glorp []) new Object[cap];\n    System.arraycopy(items, 0, \n                     a, 0, size);\n    items = a;\n  }\n\n  public Glorp get(int i) {\n    return items[i];\n  }\n...\n\n```\n### deleteback 方法\n```\npublic Glorp deleteBack() {\n  Glorp returnItem = getBack();\n  items[size - 1] = null;\n  size -= 1;  \t\n  return returnItem;\n}\n```\n**注意： \nJava only destroys unwanted objects when the last reference has been lost.**\n\n- **新名词：**`loiter`\n    - Keeping references to unneeded objects is sometimes called loitering.\n    - Save memory. Don’t loiter.\n\n    \n\n\n\n\n\n\n","slug":"CS51B-lecture1-6","published":1,"updated":"2020-07-29T15:36:17.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd8joum50001f0tz89lgffjx","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"课程大纲\"><a href=\"#课程大纲\" class=\"headerlink\" title=\"课程大纲\"></a>课程大纲</h1><h2 id=\"Phase-1-Programming-Intensive-Introduction-to-Java\"><a href=\"#Phase-1-Programming-Intensive-Introduction-to-Java\" class=\"headerlink\" title=\"Phase 1: Programming Intensive Introduction to Java.\"></a>Phase 1: Programming Intensive Introduction to Java.</h2><p>Weeks 1-4.<br>One browser-based programming HW (this HW0 is optional).<br>Three labs to introduce you to various tools (starting this week).<br>Two projects (proj0 and proj1).</p>\n<h2 id=\"Phase-2-Advanced-Programming\"><a href=\"#Phase-2-Advanced-Programming\" class=\"headerlink\" title=\"Phase 2: Advanced Programming\"></a>Phase 2: Advanced Programming</h2><p>Weeks 5-7.<br>One small HW (HW1).<br>One large project, due ~3/5.<br>New: You design your own explorable world (within some constraints).<br>Labs to support large project.</p>\n<h2 id=\"Phase-3-Data-Structures-and-Algorithms\"><a href=\"#Phase-3-Data-Structures-and-Algorithms\" class=\"headerlink\" title=\"Phase 3: Data Structures and Algorithms\"></a>Phase 3: Data Structures and Algorithms</h2><p>Weeks 8-14<br>Incredibly important and foundational material: Expect an CS job interview to lean heavily on this part of the course.<br>Labs: Implement a data structure or algorithm.<br>Each lab ends with a TA led discussion of best implementation.<br>Six HWs: Apply a data structure or algorithm toward a real world problem.<br>Two released during RRR week. Can be used to makeup missed homeworks earlier, or for practice.<br>One very challenging data structure/algorithms project (but not as big as project 2).</p>\n<p>See calendar at <a href=\"http://datastructur.es/\">http://datastructur.es</a> for more.</p>\n<h1 id=\"static-和-non-static\"><a href=\"#static-和-non-static\" class=\"headerlink\" title=\"static 和 non-static\"></a>static 和 non-static</h1><h2 id=\"静态和实例方法：\"><a href=\"#静态和实例方法：\" class=\"headerlink\" title=\"静态和实例方法：\"></a>静态和实例方法：</h2><p><strong>静态方法只能使用静态变量，同时可以直接通过类名来调动（不推荐通过对象）<br>  实例方法可以调动实例变量，同时只能通过对象来调动</strong></p>\n<h2 id=\"静态和实例变量：\"><a href=\"#静态和实例变量：\" class=\"headerlink\" title=\"静态和实例变量：\"></a>静态和实例变量：</h2><p><strong>静态变量为所有该类的对象共用，实例变量不会互相影响</strong></p>\n<h2 id=\"static-和-non-static混合调用\"><a href=\"#static-和-non-static混合调用\" class=\"headerlink\" title=\"static 和 non-static混合调用\"></a>static 和 non-static混合调用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Dog maxDog(Dog d1, Dog d2) &#123;</span><br><span class=\"line\">    if (d1.weightInPounds &gt; d2.weightInPounds) &#123;</span><br><span class=\"line\">           return d1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return d2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"String-args-命令行参数\"><a href=\"#String-args-命令行参数\" class=\"headerlink\" title=\"String[] args(命令行参数)\"></a>String[] args(命令行参数)</h1><p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**打印命令行参数的第零个*&#x2F;</span><br><span class=\"line\">public class ArgsDemo &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(args[0]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>命令行：</strong><br>其中java ArgsDemo是用于运行已编译好的class文件，后面的内容是命令行参数，以空格分隔。第零个是these。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java ArgsDemo these are command line arguments</span><br><span class=\"line\">these</span><br></pre></td></tr></table></figure>\n<h1 id=\"Library\"><a href=\"#Library\" class=\"headerlink\" title=\"Library\"></a>Library</h1><h2 id=\"Library-Documentation-Example\"><a href=\"#Library-Documentation-Example\" class=\"headerlink\" title=\"Library Documentation Example\"></a>Library Documentation Example</h2><p><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/29/aZdYsP.png\" alt=\"aZdYsP.png\"></p>\n<h1 id=\"Declaring-a-Variable\"><a href=\"#Declaring-a-Variable\" class=\"headerlink\" title=\"Declaring a Variable\"></a>Declaring a Variable</h1><p>声明一个int变量，生成32位的box<br>声明一个double变量，生成64位的box</p>\n<h2 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h2><p>There are 8 primitive types in Java:<br>byte, short, int, long, float, double, boolean, char</p>\n<p>Everything else, including arrays, is a reference type.<br>当声明一个reference type变量<br>These bits can be either set to:</p>\n<ul>\n<li>Null (all zeros).</li>\n<li>The 64 bit “address” of a specific instance of that class (returned by new).</li>\n</ul>\n<p>The golden rule:<br>b = a copies the bits from a into b.<br>Passing parameters copies the bits.</p>\n<h1 id=\"Declaration-and-Instantiation-of-Arrays\"><a href=\"#Declaration-and-Instantiation-of-Arrays\" class=\"headerlink\" title=\"Declaration and Instantiation of Arrays\"></a>Declaration and Instantiation of Arrays</h1><p><code>int[] x = new int[]&#123;0, 1, 2, 95, 4&#125;;</code></p>\n<h1 id=\"SLList-单向列表\"><a href=\"#SLList-单向列表\" class=\"headerlink\" title=\"SLList(单向列表)\"></a>SLList(单向列表)</h1><h2 id=\"改进前\"><a href=\"#改进前\" class=\"headerlink\" title=\"改进前\"></a>改进前</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IntList &#123;</span><br><span class=\"line\">   public int first;</span><br><span class=\"line\">   public IntList rest;</span><br><span class=\"line\"> </span><br><span class=\"line\">   public IntList(int f, IntList r) &#123;</span><br><span class=\"line\">      first &#x3D; f;</span><br><span class=\"line\">      rest &#x3D; r;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"改进后\"><a href=\"#改进后\" class=\"headerlink\" title=\"改进后\"></a>改进后</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SLList &#123;</span><br><span class=\"line\">    public static class IntNode &#123;</span><br><span class=\"line\">        public int item;</span><br><span class=\"line\">        public IntNode next;</span><br><span class=\"line\">        public IntNode(int i, IntNode n) &#123;</span><br><span class=\"line\">            item &#x3D; i;</span><br><span class=\"line\">            next &#x3D; n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private IntNode sentinel;</span><br><span class=\"line\">    private int size;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SLList() &#123;</span><br><span class=\"line\">        sentinel &#x3D; new (63, null)</span><br><span class=\"line\">        size &#x3D; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public SLList(int x) &#123;</span><br><span class=\"line\">        sentinel &#x3D; new IntNode(63, null);</span><br><span class=\"line\">        sentinel.next &#x3D; new IntNode(x, null);</span><br><span class=\"line\">        size &#x3D; 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addFirst(int x) &#123;</span><br><span class=\"line\">        sentinel.next &#x3D; new IntNode(x, sentinel.next);</span><br><span class=\"line\">        size +&#x3D; 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public int getFirst() &#123;</span><br><span class=\"line\">        return sentinel.next.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int size() &#123;</span><br><span class=\"line\">        return size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addLast(int x) &#123;</span><br><span class=\"line\">        size +&#x3D; 1;</span><br><span class=\"line\">        IntNode p &#x3D; sentinel;</span><br><span class=\"line\">        while (p.next !&#x3D; null) &#123;</span><br><span class=\"line\">           p &#x3D; p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next &#x3D; new IntNode(x, null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"改进步骤\"><a href=\"#改进步骤\" class=\"headerlink\" title=\"改进步骤\"></a>改进步骤</h2><table>\n<thead>\n<tr>\n<th>Methods</th>\n<th></th>\n<th>Non-Obvious Improvements</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>addFirst(int x)</td>\n<td>#1</td>\n<td>Rebranding: IntList → IntNode</td>\n</tr>\n<tr>\n<td>getFirst</td>\n<td>#2</td>\n<td>Bureaucracy: SLList</td>\n</tr>\n<tr>\n<td>size</td>\n<td>#3</td>\n<td>Access Control: public → private</td>\n</tr>\n<tr>\n<td>addLast(int x)</td>\n<td>#4</td>\n<td>Nested Class: Bringing IntNode into SLList</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>#5</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>#6</td>\n</tr>\n</tbody></table>\n<h2 id=\"第六步-哨兵节点\"><a href=\"#第六步-哨兵节点\" class=\"headerlink\" title=\"第六步-哨兵节点\"></a>第六步-哨兵节点</h2><p>使SLList有一个哨兵节点，而哨兵节点可以指向<code>null</code>或者<code>第一个节点</code></p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>防止当列表为空时，无法用<code>first.method()</code>调用方法</p>\n<h2 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h2><p>Inserting at the back of an SLList is much slower than the front.</p>\n<h1 id=\"DLList-双向列表\"><a href=\"#DLList-双向列表\" class=\"headerlink\" title=\"DLList(双向列表)\"></a>DLList(双向列表)</h1><h2 id=\"改进一\"><a href=\"#改进一\" class=\"headerlink\" title=\"改进一\"></a>改进一</h2><p>增加<code>last</code>，指向最后一个节点</p>\n<h3 id=\"缺陷-1\"><a href=\"#缺陷-1\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h3><p>对于倒数第二个节点来说还要重新遍历一遍</p>\n<h2 id=\"改进二\"><a href=\"#改进二\" class=\"headerlink\" title=\"改进二\"></a>改进二</h2><p>使所有节点变成双向的</p>\n<h2 id=\"改进三\"><a href=\"#改进三\" class=\"headerlink\" title=\"改进三\"></a>改进三</h2><h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>增加一个指向<code>last</code>哨兵节点在开始时和指向<code>first</code>的哨兵节点互相指向<br>原因：last参数可能指向将要指向<code>first</code>的哨兵节点</p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>使最后一个节点重新指向将要指向<code>first</code>节点的哨兵节点</p>\n<h1 id=\"Generic-Lists-加入泛型\"><a href=\"#Generic-Lists-加入泛型\" class=\"headerlink\" title=\"Generic Lists (加入泛型)\"></a>Generic Lists (加入泛型)</h1><h2 id=\"ALList和DLList的缺陷\"><a href=\"#ALList和DLList的缺陷\" class=\"headerlink\" title=\"ALList和DLList的缺陷\"></a>ALList和DLList的缺陷</h2><p>One issue with our list classes: They only supports integers.</p>\n<h2 id=\"泛型使用的法则\"><a href=\"#泛型使用的法则\" class=\"headerlink\" title=\"泛型使用的法则\"></a>泛型使用的法则</h2><h3 id=\"类编写\"><a href=\"#类编写\" class=\"headerlink\" title=\"类编写\"></a>类编写</h3><p>类名之后使用&lt;&gt;指定一次通用类型名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DLList&lt;T&gt; &#123;</span><br><span class=\"line\">    private IntNode sentinel;</span><br><span class=\"line\">    private int size;</span><br><span class=\"line\"></span><br><span class=\"line\">    public class IntNode &#123;</span><br><span class=\"line\">        public IntNode prev;</span><br><span class=\"line\">        public T item;</span><br><span class=\"line\">        public IntNode next;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明时使用\"><a href=\"#声明时使用\" class=\"headerlink\" title=\"声明时使用\"></a>声明时使用</h3><p>在声明时在&lt;&gt;中指定一次特定的所需类型，并在实例化时使用空的&lt;&gt;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DLList&lt;String&gt; d2 &#x3D; new DLList&lt;&gt;(&quot;hello&quot;);</span><br><span class=\"line\">d2.addLast(&quot;world&quot;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例化一个普通的基本类型\"><a href=\"#实例化一个普通的基本类型\" class=\"headerlink\" title=\"实例化一个普通的基本类型\"></a>实例化一个普通的基本类型</h3><p>使用Integer，Double，Character，Boolean，Long，Short，Byte，或Float。</p>\n<h1 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h1><p>Three valid notations:<br>x = new int[3];<br>y = new int[]{1, 2, 3, 4, 5};<br>int[] z = {9, 10, 11, 12, 13};</p>\n<h2 id=\"Two-ways-to-copy-arrays\"><a href=\"#Two-ways-to-copy-arrays\" class=\"headerlink\" title=\"Two ways to copy arrays\"></a>Two ways to copy arrays</h2><ul>\n<li>Item by item using a loop.</li>\n<li>Using <code>System.arraycopy(b, 0, x, 3, 2)</code> Takes 5 parameters:<ul>\n<li>Source array</li>\n<li>Start position in source</li>\n<li>Target array</li>\n<li>Start position in target</li>\n<li>Number to copy </li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2D-arrays-二维数组\"><a href=\"#2D-arrays-二维数组\" class=\"headerlink\" title=\"2D arrays(二维数组)\"></a>2D arrays(二维数组)</h1><h2 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int[][] x &#x3D; new int[3][];</span><br><span class=\"line\">\\\\这将为x创建一个64bits的内存盒用于存储地址，和三个64bits的内存盒用于存储指向下一层数组（长度未确定）的地址。</span><br><span class=\"line\">int[][] y &#x3D; new int [][]&#123;&#123;1&#125;, &#123;1, 1&#125;, &#123;1, 2, 1&#125;, &#123;1, 3, 3, 1&#125;&#125;;;</span><br><span class=\"line\">int[][] z &#x3D; &#123;&#123;1&#125;, &#123;1, 1&#125;, &#123;1, 2, 1&#125;, &#123;1, 3, 3, 1&#125;&#125;;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int[][] pascalsTriangle;</span><br><span class=\"line\">pascalsTriangle &#x3D; new int[4][];</span><br><span class=\"line\">int[] rowZero &#x3D; pascalsTriangle[0];</span><br><span class=\"line\"></span><br><span class=\"line\">pascalsTriangle[0] &#x3D; new int[]&#123;1&#125;;</span><br><span class=\"line\">pascalsTriangle[1] &#x3D; new int[]&#123;1, 1&#125;;</span><br><span class=\"line\">pascalsTriangle[2] &#x3D; new int[]&#123;1, 2, 1&#125;;</span><br><span class=\"line\">pascalsTriangle[3] &#x3D; new int[]&#123;1, 3, 3, 1&#125;;</span><br><span class=\"line\">int[] rowTwo &#x3D; pascalsTriangle[2];</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>int[][] x = new int[n][];</code><br>声明一个叫x的数组，数组的<code>size</code>为n，每个位置可以指向一个int数组</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>数组中所存贮的数据类型必须一致</p>\n<h1 id=\"Naive-Array-Lists-数组列表\"><a href=\"#Naive-Array-Lists-数组列表\" class=\"headerlink\" title=\"Naive Array Lists(数组列表)\"></a>Naive Array Lists(数组列表)</h1><h2 id=\"使用数组列表需要注意的事项\"><a href=\"#使用数组列表需要注意的事项\" class=\"headerlink\" title=\"使用数组列表需要注意的事项\"></a>使用数组列表需要注意的事项</h2><ul>\n<li>he position of the next item to be inserted is always size.</li>\n<li>size is always the number of items in the AList.</li>\n<li>The last item in the list is always in position size - 1.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AList &#123;</span><br><span class=\"line\">  private int[] items;    </span><br><span class=\"line\">  private int size;</span><br><span class=\"line\"> </span><br><span class=\"line\">  public AList() &#123;</span><br><span class=\"line\">    items &#x3D; new int[100];  size &#x3D; 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  public void addLast(int x) &#123;</span><br><span class=\"line\">    items[size] &#x3D; x;</span><br><span class=\"line\">    size +&#x3D; 1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  public int getLast() &#123;</span><br><span class=\"line\">    return items[size - 1];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  public int get(int i) &#123;</span><br><span class=\"line\">    return items[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public int size() &#123;</span><br><span class=\"line\">    return size;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int removeLast() &#123;</span><br><span class=\"line\">  int returnItem &#x3D; items[size - 1];</span><br><span class=\"line\">  items[size - 1] &#x3D; 0;</span><br><span class=\"line\">  size -&#x3D; 1;      </span><br><span class=\"line\">  return returnItem;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"resizing\"><a href=\"#resizing\" class=\"headerlink\" title=\"resizing\"></a>resizing</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void resize(int capacity) &#123;</span><br><span class=\"line\">  int[] a &#x3D; new int[capacity];</span><br><span class=\"line\">  System.arraycopy(items, 0, a, 0, size);</span><br><span class=\"line\">  items &#x3D; a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public void addLast(int x) &#123;</span><br><span class=\"line\">  if (size &#x3D;&#x3D; items.length) &#123;</span><br><span class=\"line\">    resize(size + 1);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  items[size] &#x3D; x;</span><br><span class=\"line\">  size +&#x3D; 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"改进使得节省内存（减少resize的次数）\"><a href=\"#改进使得节省内存（减少resize的次数）\" class=\"headerlink\" title=\"改进使得节省内存（减少resize的次数）\"></a>改进使得节省内存（减少resize的次数）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void addLast(int x) &#123;</span><br><span class=\"line\">  if (size &#x3D;&#x3D; items.length) &#123;</span><br><span class=\"line\">    resize(size * RFACTOR);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  items[size] &#x3D; x;</span><br><span class=\"line\">  size +&#x3D; 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"改进-优化内存\"><a href=\"#改进-优化内存\" class=\"headerlink\" title=\"改进-优化内存\"></a>改进-优化内存</h3><ul>\n<li>Define the “usage ratio” R = size / items.length;</li>\n<li>Typical solution: Half array size when R &lt; 0.25.</li>\n</ul>\n<h3 id=\"泛型数组列表\"><a href=\"#泛型数组列表\" class=\"headerlink\" title=\"泛型数组列表\"></a>泛型数组列表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AList&lt;Glorp&gt; &#123;</span><br><span class=\"line\">  private Glorp[] items;    </span><br><span class=\"line\">  private int size;</span><br><span class=\"line\"> </span><br><span class=\"line\">  public AList() &#123;</span><br><span class=\"line\">    items &#x3D; (Glorp []) new Object[8];  </span><br><span class=\"line\">    size &#x3D; 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  private void resize(int cap) &#123;</span><br><span class=\"line\">    Glorp[] a &#x3D; (Glorp []) new Object[cap];</span><br><span class=\"line\">    System.arraycopy(items, 0, </span><br><span class=\"line\">                     a, 0, size);</span><br><span class=\"line\">    items &#x3D; a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Glorp get(int i) &#123;</span><br><span class=\"line\">    return items[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"deleteback-方法\"><a href=\"#deleteback-方法\" class=\"headerlink\" title=\"deleteback 方法\"></a>deleteback 方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Glorp deleteBack() &#123;</span><br><span class=\"line\">  Glorp returnItem &#x3D; getBack();</span><br><span class=\"line\">  items[size - 1] &#x3D; null;</span><br><span class=\"line\">  size -&#x3D; 1;      </span><br><span class=\"line\">  return returnItem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：<br>Java only destroys unwanted objects when the last reference has been lost.</strong></p>\n<ul>\n<li><strong>新名词：</strong><code>loiter</code><ul>\n<li>Keeping references to unneeded objects is sometimes called loitering.</li>\n<li>Save memory. Don’t loiter.</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"课程大纲\"><a href=\"#课程大纲\" class=\"headerlink\" title=\"课程大纲\"></a>课程大纲</h1><h2 id=\"Phase-1-Programming-Intensive-Introduction-to-Java\"><a href=\"#Phase-1-Programming-Intensive-Introduction-to-Java\" class=\"headerlink\" title=\"Phase 1: Programming Intensive Introduction to Java.\"></a>Phase 1: Programming Intensive Introduction to Java.</h2><p>Weeks 1-4.<br>One browser-based programming HW (this HW0 is optional).<br>Three labs to introduce you to various tools (starting this week).<br>Two projects (proj0 and proj1).</p>\n<h2 id=\"Phase-2-Advanced-Programming\"><a href=\"#Phase-2-Advanced-Programming\" class=\"headerlink\" title=\"Phase 2: Advanced Programming\"></a>Phase 2: Advanced Programming</h2><p>Weeks 5-7.<br>One small HW (HW1).<br>One large project, due ~3/5.<br>New: You design your own explorable world (within some constraints).<br>Labs to support large project.</p>\n<h2 id=\"Phase-3-Data-Structures-and-Algorithms\"><a href=\"#Phase-3-Data-Structures-and-Algorithms\" class=\"headerlink\" title=\"Phase 3: Data Structures and Algorithms\"></a>Phase 3: Data Structures and Algorithms</h2><p>Weeks 8-14<br>Incredibly important and foundational material: Expect an CS job interview to lean heavily on this part of the course.<br>Labs: Implement a data structure or algorithm.<br>Each lab ends with a TA led discussion of best implementation.<br>Six HWs: Apply a data structure or algorithm toward a real world problem.<br>Two released during RRR week. Can be used to makeup missed homeworks earlier, or for practice.<br>One very challenging data structure/algorithms project (but not as big as project 2).</p>\n<p>See calendar at <a href=\"http://datastructur.es/\">http://datastructur.es</a> for more.</p>\n<h1 id=\"static-和-non-static\"><a href=\"#static-和-non-static\" class=\"headerlink\" title=\"static 和 non-static\"></a>static 和 non-static</h1><h2 id=\"静态和实例方法：\"><a href=\"#静态和实例方法：\" class=\"headerlink\" title=\"静态和实例方法：\"></a>静态和实例方法：</h2><p><strong>静态方法只能使用静态变量，同时可以直接通过类名来调动（不推荐通过对象）<br>  实例方法可以调动实例变量，同时只能通过对象来调动</strong></p>\n<h2 id=\"静态和实例变量：\"><a href=\"#静态和实例变量：\" class=\"headerlink\" title=\"静态和实例变量：\"></a>静态和实例变量：</h2><p><strong>静态变量为所有该类的对象共用，实例变量不会互相影响</strong></p>\n<h2 id=\"static-和-non-static混合调用\"><a href=\"#static-和-non-static混合调用\" class=\"headerlink\" title=\"static 和 non-static混合调用\"></a>static 和 non-static混合调用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Dog maxDog(Dog d1, Dog d2) &#123;</span><br><span class=\"line\">    if (d1.weightInPounds &gt; d2.weightInPounds) &#123;</span><br><span class=\"line\">           return d1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return d2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"String-args-命令行参数\"><a href=\"#String-args-命令行参数\" class=\"headerlink\" title=\"String[] args(命令行参数)\"></a>String[] args(命令行参数)</h1><p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**打印命令行参数的第零个*&#x2F;</span><br><span class=\"line\">public class ArgsDemo &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(args[0]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>命令行：</strong><br>其中java ArgsDemo是用于运行已编译好的class文件，后面的内容是命令行参数，以空格分隔。第零个是these。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java ArgsDemo these are command line arguments</span><br><span class=\"line\">these</span><br></pre></td></tr></table></figure>\n<h1 id=\"Library\"><a href=\"#Library\" class=\"headerlink\" title=\"Library\"></a>Library</h1><h2 id=\"Library-Documentation-Example\"><a href=\"#Library-Documentation-Example\" class=\"headerlink\" title=\"Library Documentation Example\"></a>Library Documentation Example</h2><p><img src=\"https://s1.ax1x.com/2020/07/29/aZdYsP.png\" alt=\"aZdYsP.png\"></p>\n<h1 id=\"Declaring-a-Variable\"><a href=\"#Declaring-a-Variable\" class=\"headerlink\" title=\"Declaring a Variable\"></a>Declaring a Variable</h1><p>声明一个int变量，生成32位的box<br>声明一个double变量，生成64位的box</p>\n<h2 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h2><p>There are 8 primitive types in Java:<br>byte, short, int, long, float, double, boolean, char</p>\n<p>Everything else, including arrays, is a reference type.<br>当声明一个reference type变量<br>These bits can be either set to:</p>\n<ul>\n<li>Null (all zeros).</li>\n<li>The 64 bit “address” of a specific instance of that class (returned by new).</li>\n</ul>\n<p>The golden rule:<br>b = a copies the bits from a into b.<br>Passing parameters copies the bits.</p>\n<h1 id=\"Declaration-and-Instantiation-of-Arrays\"><a href=\"#Declaration-and-Instantiation-of-Arrays\" class=\"headerlink\" title=\"Declaration and Instantiation of Arrays\"></a>Declaration and Instantiation of Arrays</h1><p><code>int[] x = new int[]&#123;0, 1, 2, 95, 4&#125;;</code></p>\n<h1 id=\"SLList-单向列表\"><a href=\"#SLList-单向列表\" class=\"headerlink\" title=\"SLList(单向列表)\"></a>SLList(单向列表)</h1><h2 id=\"改进前\"><a href=\"#改进前\" class=\"headerlink\" title=\"改进前\"></a>改进前</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IntList &#123;</span><br><span class=\"line\">   public int first;</span><br><span class=\"line\">   public IntList rest;</span><br><span class=\"line\"> </span><br><span class=\"line\">   public IntList(int f, IntList r) &#123;</span><br><span class=\"line\">      first &#x3D; f;</span><br><span class=\"line\">      rest &#x3D; r;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"改进后\"><a href=\"#改进后\" class=\"headerlink\" title=\"改进后\"></a>改进后</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SLList &#123;</span><br><span class=\"line\">    public static class IntNode &#123;</span><br><span class=\"line\">        public int item;</span><br><span class=\"line\">        public IntNode next;</span><br><span class=\"line\">        public IntNode(int i, IntNode n) &#123;</span><br><span class=\"line\">            item &#x3D; i;</span><br><span class=\"line\">            next &#x3D; n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private IntNode sentinel;</span><br><span class=\"line\">    private int size;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SLList() &#123;</span><br><span class=\"line\">        sentinel &#x3D; new (63, null)</span><br><span class=\"line\">        size &#x3D; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public SLList(int x) &#123;</span><br><span class=\"line\">        sentinel &#x3D; new IntNode(63, null);</span><br><span class=\"line\">        sentinel.next &#x3D; new IntNode(x, null);</span><br><span class=\"line\">        size &#x3D; 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addFirst(int x) &#123;</span><br><span class=\"line\">        sentinel.next &#x3D; new IntNode(x, sentinel.next);</span><br><span class=\"line\">        size +&#x3D; 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public int getFirst() &#123;</span><br><span class=\"line\">        return sentinel.next.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int size() &#123;</span><br><span class=\"line\">        return size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addLast(int x) &#123;</span><br><span class=\"line\">        size +&#x3D; 1;</span><br><span class=\"line\">        IntNode p &#x3D; sentinel;</span><br><span class=\"line\">        while (p.next !&#x3D; null) &#123;</span><br><span class=\"line\">           p &#x3D; p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next &#x3D; new IntNode(x, null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"改进步骤\"><a href=\"#改进步骤\" class=\"headerlink\" title=\"改进步骤\"></a>改进步骤</h2><table>\n<thead>\n<tr>\n<th>Methods</th>\n<th></th>\n<th>Non-Obvious Improvements</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>addFirst(int x)</td>\n<td>#1</td>\n<td>Rebranding: IntList → IntNode</td>\n</tr>\n<tr>\n<td>getFirst</td>\n<td>#2</td>\n<td>Bureaucracy: SLList</td>\n</tr>\n<tr>\n<td>size</td>\n<td>#3</td>\n<td>Access Control: public → private</td>\n</tr>\n<tr>\n<td>addLast(int x)</td>\n<td>#4</td>\n<td>Nested Class: Bringing IntNode into SLList</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>#5</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>#6</td>\n</tr>\n</tbody></table>\n<h2 id=\"第六步-哨兵节点\"><a href=\"#第六步-哨兵节点\" class=\"headerlink\" title=\"第六步-哨兵节点\"></a>第六步-哨兵节点</h2><p>使SLList有一个哨兵节点，而哨兵节点可以指向<code>null</code>或者<code>第一个节点</code></p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>防止当列表为空时，无法用<code>first.method()</code>调用方法</p>\n<h2 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h2><p>Inserting at the back of an SLList is much slower than the front.</p>\n<h1 id=\"DLList-双向列表\"><a href=\"#DLList-双向列表\" class=\"headerlink\" title=\"DLList(双向列表)\"></a>DLList(双向列表)</h1><h2 id=\"改进一\"><a href=\"#改进一\" class=\"headerlink\" title=\"改进一\"></a>改进一</h2><p>增加<code>last</code>，指向最后一个节点</p>\n<h3 id=\"缺陷-1\"><a href=\"#缺陷-1\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h3><p>对于倒数第二个节点来说还要重新遍历一遍</p>\n<h2 id=\"改进二\"><a href=\"#改进二\" class=\"headerlink\" title=\"改进二\"></a>改进二</h2><p>使所有节点变成双向的</p>\n<h2 id=\"改进三\"><a href=\"#改进三\" class=\"headerlink\" title=\"改进三\"></a>改进三</h2><h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>增加一个指向<code>last</code>哨兵节点在开始时和指向<code>first</code>的哨兵节点互相指向<br>原因：last参数可能指向将要指向<code>first</code>的哨兵节点</p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>使最后一个节点重新指向将要指向<code>first</code>节点的哨兵节点</p>\n<h1 id=\"Generic-Lists-加入泛型\"><a href=\"#Generic-Lists-加入泛型\" class=\"headerlink\" title=\"Generic Lists (加入泛型)\"></a>Generic Lists (加入泛型)</h1><h2 id=\"ALList和DLList的缺陷\"><a href=\"#ALList和DLList的缺陷\" class=\"headerlink\" title=\"ALList和DLList的缺陷\"></a>ALList和DLList的缺陷</h2><p>One issue with our list classes: They only supports integers.</p>\n<h2 id=\"泛型使用的法则\"><a href=\"#泛型使用的法则\" class=\"headerlink\" title=\"泛型使用的法则\"></a>泛型使用的法则</h2><h3 id=\"类编写\"><a href=\"#类编写\" class=\"headerlink\" title=\"类编写\"></a>类编写</h3><p>类名之后使用&lt;&gt;指定一次通用类型名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DLList&lt;T&gt; &#123;</span><br><span class=\"line\">    private IntNode sentinel;</span><br><span class=\"line\">    private int size;</span><br><span class=\"line\"></span><br><span class=\"line\">    public class IntNode &#123;</span><br><span class=\"line\">        public IntNode prev;</span><br><span class=\"line\">        public T item;</span><br><span class=\"line\">        public IntNode next;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明时使用\"><a href=\"#声明时使用\" class=\"headerlink\" title=\"声明时使用\"></a>声明时使用</h3><p>在声明时在&lt;&gt;中指定一次特定的所需类型，并在实例化时使用空的&lt;&gt;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DLList&lt;String&gt; d2 &#x3D; new DLList&lt;&gt;(&quot;hello&quot;);</span><br><span class=\"line\">d2.addLast(&quot;world&quot;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例化一个普通的基本类型\"><a href=\"#实例化一个普通的基本类型\" class=\"headerlink\" title=\"实例化一个普通的基本类型\"></a>实例化一个普通的基本类型</h3><p>使用Integer，Double，Character，Boolean，Long，Short，Byte，或Float。</p>\n<h1 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h1><p>Three valid notations:<br>x = new int[3];<br>y = new int[]{1, 2, 3, 4, 5};<br>int[] z = {9, 10, 11, 12, 13};</p>\n<h2 id=\"Two-ways-to-copy-arrays\"><a href=\"#Two-ways-to-copy-arrays\" class=\"headerlink\" title=\"Two ways to copy arrays\"></a>Two ways to copy arrays</h2><ul>\n<li>Item by item using a loop.</li>\n<li>Using <code>System.arraycopy(b, 0, x, 3, 2)</code> Takes 5 parameters:<ul>\n<li>Source array</li>\n<li>Start position in source</li>\n<li>Target array</li>\n<li>Start position in target</li>\n<li>Number to copy </li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2D-arrays-二维数组\"><a href=\"#2D-arrays-二维数组\" class=\"headerlink\" title=\"2D arrays(二维数组)\"></a>2D arrays(二维数组)</h1><h2 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int[][] x &#x3D; new int[3][];</span><br><span class=\"line\">\\\\这将为x创建一个64bits的内存盒用于存储地址，和三个64bits的内存盒用于存储指向下一层数组（长度未确定）的地址。</span><br><span class=\"line\">int[][] y &#x3D; new int [][]&#123;&#123;1&#125;, &#123;1, 1&#125;, &#123;1, 2, 1&#125;, &#123;1, 3, 3, 1&#125;&#125;;;</span><br><span class=\"line\">int[][] z &#x3D; &#123;&#123;1&#125;, &#123;1, 1&#125;, &#123;1, 2, 1&#125;, &#123;1, 3, 3, 1&#125;&#125;;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int[][] pascalsTriangle;</span><br><span class=\"line\">pascalsTriangle &#x3D; new int[4][];</span><br><span class=\"line\">int[] rowZero &#x3D; pascalsTriangle[0];</span><br><span class=\"line\"></span><br><span class=\"line\">pascalsTriangle[0] &#x3D; new int[]&#123;1&#125;;</span><br><span class=\"line\">pascalsTriangle[1] &#x3D; new int[]&#123;1, 1&#125;;</span><br><span class=\"line\">pascalsTriangle[2] &#x3D; new int[]&#123;1, 2, 1&#125;;</span><br><span class=\"line\">pascalsTriangle[3] &#x3D; new int[]&#123;1, 3, 3, 1&#125;;</span><br><span class=\"line\">int[] rowTwo &#x3D; pascalsTriangle[2];</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>int[][] x = new int[n][];</code><br>声明一个叫x的数组，数组的<code>size</code>为n，每个位置可以指向一个int数组</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>数组中所存贮的数据类型必须一致</p>\n<h1 id=\"Naive-Array-Lists-数组列表\"><a href=\"#Naive-Array-Lists-数组列表\" class=\"headerlink\" title=\"Naive Array Lists(数组列表)\"></a>Naive Array Lists(数组列表)</h1><h2 id=\"使用数组列表需要注意的事项\"><a href=\"#使用数组列表需要注意的事项\" class=\"headerlink\" title=\"使用数组列表需要注意的事项\"></a>使用数组列表需要注意的事项</h2><ul>\n<li>he position of the next item to be inserted is always size.</li>\n<li>size is always the number of items in the AList.</li>\n<li>The last item in the list is always in position size - 1.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AList &#123;</span><br><span class=\"line\">  private int[] items;    </span><br><span class=\"line\">  private int size;</span><br><span class=\"line\"> </span><br><span class=\"line\">  public AList() &#123;</span><br><span class=\"line\">    items &#x3D; new int[100];  size &#x3D; 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  public void addLast(int x) &#123;</span><br><span class=\"line\">    items[size] &#x3D; x;</span><br><span class=\"line\">    size +&#x3D; 1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  public int getLast() &#123;</span><br><span class=\"line\">    return items[size - 1];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  public int get(int i) &#123;</span><br><span class=\"line\">    return items[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public int size() &#123;</span><br><span class=\"line\">    return size;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int removeLast() &#123;</span><br><span class=\"line\">  int returnItem &#x3D; items[size - 1];</span><br><span class=\"line\">  items[size - 1] &#x3D; 0;</span><br><span class=\"line\">  size -&#x3D; 1;      </span><br><span class=\"line\">  return returnItem;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"resizing\"><a href=\"#resizing\" class=\"headerlink\" title=\"resizing\"></a>resizing</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void resize(int capacity) &#123;</span><br><span class=\"line\">  int[] a &#x3D; new int[capacity];</span><br><span class=\"line\">  System.arraycopy(items, 0, a, 0, size);</span><br><span class=\"line\">  items &#x3D; a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public void addLast(int x) &#123;</span><br><span class=\"line\">  if (size &#x3D;&#x3D; items.length) &#123;</span><br><span class=\"line\">    resize(size + 1);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  items[size] &#x3D; x;</span><br><span class=\"line\">  size +&#x3D; 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"改进使得节省内存（减少resize的次数）\"><a href=\"#改进使得节省内存（减少resize的次数）\" class=\"headerlink\" title=\"改进使得节省内存（减少resize的次数）\"></a>改进使得节省内存（减少resize的次数）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void addLast(int x) &#123;</span><br><span class=\"line\">  if (size &#x3D;&#x3D; items.length) &#123;</span><br><span class=\"line\">    resize(size * RFACTOR);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  items[size] &#x3D; x;</span><br><span class=\"line\">  size +&#x3D; 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"改进-优化内存\"><a href=\"#改进-优化内存\" class=\"headerlink\" title=\"改进-优化内存\"></a>改进-优化内存</h3><ul>\n<li>Define the “usage ratio” R = size / items.length;</li>\n<li>Typical solution: Half array size when R &lt; 0.25.</li>\n</ul>\n<h3 id=\"泛型数组列表\"><a href=\"#泛型数组列表\" class=\"headerlink\" title=\"泛型数组列表\"></a>泛型数组列表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AList&lt;Glorp&gt; &#123;</span><br><span class=\"line\">  private Glorp[] items;    </span><br><span class=\"line\">  private int size;</span><br><span class=\"line\"> </span><br><span class=\"line\">  public AList() &#123;</span><br><span class=\"line\">    items &#x3D; (Glorp []) new Object[8];  </span><br><span class=\"line\">    size &#x3D; 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  private void resize(int cap) &#123;</span><br><span class=\"line\">    Glorp[] a &#x3D; (Glorp []) new Object[cap];</span><br><span class=\"line\">    System.arraycopy(items, 0, </span><br><span class=\"line\">                     a, 0, size);</span><br><span class=\"line\">    items &#x3D; a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Glorp get(int i) &#123;</span><br><span class=\"line\">    return items[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"deleteback-方法\"><a href=\"#deleteback-方法\" class=\"headerlink\" title=\"deleteback 方法\"></a>deleteback 方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Glorp deleteBack() &#123;</span><br><span class=\"line\">  Glorp returnItem &#x3D; getBack();</span><br><span class=\"line\">  items[size - 1] &#x3D; null;</span><br><span class=\"line\">  size -&#x3D; 1;      </span><br><span class=\"line\">  return returnItem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：<br>Java only destroys unwanted objects when the last reference has been lost.</strong></p>\n<ul>\n<li><strong>新名词：</strong><code>loiter</code><ul>\n<li>Keeping references to unneeded objects is sometimes called loitering.</li>\n<li>Save memory. Don’t loiter.</li>\n</ul>\n</li>\n</ul>\n"},{"title":"CS61B-lecture10,11","date":"2020-07-29T13:31:42.000Z","keywords":null,"description":null,"cover":"https://s1.ax1x.com/2020/07/18/U2sqXV.jpg","_content":"","source":"_posts/CS61B-lecture10-11.md","raw":"---\ntitle: 'CS61B-lecture10,11'\ndate: 2020-07-29 21:31:42\ntags:\ncategories:\nkeywords:\ndescription:\ncover:\n---\n","slug":"CS61B-lecture10-11","published":1,"updated":"2020-07-29T13:31:42.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd8joum80003f0tzhxxxcmha","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":""},{"title":"CS61B-lecture7，8，9","date":"2020-07-29T03:49:12.000Z","keywords":"CS61B","description":"继承，抽象，接口,JUnit,封装，override，overload，casting","cover":"https://s1.ax1x.com/2020/07/18/U2sqXV.jpg","_content":"\n# Interface Inheritance\n\n\n\n\n## 子类和父类的构造器\n\n![aViADe.png](https://s1.ax1x.com/2020/07/28/aViADe.png)\n\n## Super();\n\n- 当使用了子类的构造器时，会自动加入一行代码`super();`表示使用了父类的构造器\n\n- Use super to invoke overridden superclass methods and constructors.(使用super来调用父类被override的方法)\n\n\n\n\n# implements和extends\n## 父类和子类\nimplements和extends 代表了父类和子类的关系，子类继承父类所有的签名\n    \n如果子类要继承方法，需要用default标明\n\n**子类需要override所用方法并用 ·@override· 标明**\n原因是可能有些时候两个方法不满足override条件，需要这行代码来检查\n\n子类对象确实拥有父类对象中所有的属性和方法，但是父类对象中的私有属性和方法，子类是无法访问到的，只是拥有，但不能使用。\n\n当子类覆盖父类的成员变量时，父类方法使用的是父类的成员变量，子类方法使用的是子类的成员变量\n\n- 子类覆盖父类的方法，必须有同样的参数返回类型，否则编译不能通过\n- 子类覆盖父类的方法，在jdk1.5后，参数返回类可以是父类方法返回类的子类\n- 子类覆盖父类方法，可以修改方法作用域修饰符，但只能把方法的作用域放大，而不能把public修改为private\n- 子类方法能够访问父类的protected作用域成员，不能够访问默认的作用域成员,除非子类与父类同包\n- 子类的静态方法不能隐藏同名的父类实例方法\n\n***注意：*** 子类不能直接访问父类的私有属性，子类只能在父类中写一个public的getXXX的方法来获取父类中的private属性，子类就调用父类的getXXX来获取private属性\n\n## 总结\n父类中的公有方法和域(属性)，在类继承中将会被子类继承，但是私有的将不能被继承。\n## extends和implements的区别\nWhen a class is a hyponym of an interface, we used implements.\nExample: SLList<Blorp> implements List61B<Blorp>\n\nIf you want one class to be a hyponym of another class, you use extends.\n\n- extends是继承父类，只要那个类不是声明为final或者那个类定义为abstract的就能继承，\n- JAVA中不支持多重继承，但是可以用接口来实现，这样就要用到implements，\n- 继承只能继承一个类，但implements可以实现多个接口，用逗号分开就行了 ,\n     比如  `class A extends B implementsC,D,E   `\n\n \n\n\n\n \n\n## 总结\n对于class而言，extends用于（单）继承一个类（class），而implements用于实现一个接口（interface）。  \n\ninterface的引入是为了部分地提供多继承的功能。在interface中只需声明方法头，而将方法体留给实现的class来做。这些实现的class的实例完全可以当作interface的实例来对待。在interface之间也可以声明为extends（多继承）的关系。\n\n \n\n \n注意:一个interface可以extends多个其他interface。\n\n\n# Casting\n以下代码用了casting可以编译\n\n```\nPoodle frank  = new Poodle(\"Frank\", 5);\nPoodle frankJr = new Poodle(\"Frank Jr.\", 15);\nDog largerDog = maxDog(frank, frankJr);\nPoodle largerPoodle = (Poodle) maxDog(frank, frankJr);\n```\n注意：\n- casting使得编译器可以将动态类型为父类表示为它的子类，但是在使用子类的方法时可能会报错\n- casting不会改变参数类型\n\n\n# Dynamic Method Selection\n\n## 在使用override时\n\n决定最终方法使用的是`dynamic type`，也叫`run-time type` 与次相对应的还有`static type`，也叫`compile-time type`\n\n    \n\n## 在使用overload时\n\n根据参数静态类型来决定方法调用，当找不到时会找一个近似的，实在没有会报错\n\n## 注意事项：\n- overload的优先级在override之上\n\n- Remember: The compiler chooses the most specific matching method signature from the static type of the invoking class.（override调用规则）\n\n\n# JUnit\n![aEvnVx.png](https://s1.ax1x.com/2020/07/28/aEvnVx.png)\n\n## New Syntax #1: \n`assertEquals(expected, actual);`\n- Tests that expected equals actual.\n- If not, program terminates with verbose message.\n- Other methods like `assertEquals` include `assertFalse`, `assertNotNull`, etc., see http://junit.org/junit4/javadoc/4.12/org/junit/Assert.html\n\n## 在使用JUnit时import\n\n```\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n```\n\n\n## JUnittest 格式：\n```\n@Test\npublic void testSort() {\n  ...\n}\n```\n\n# Higher Order Function \nA function that treats another function as data.\n## Example in Python\n\n```\ndef tenX(x):\n\treturn 10*x\n \ndef do_twice(f, x):\n\treturn f(f(x))\n \nprint(do_twice(tenX, 2)) \n```\n## Same in java\n```\npublic interface IntUnaryFunction {\n\tint apply(int x);\n}\n\npublic class TenX implements IntUnaryFunction {\n\tpublic int apply(int x) {\n   \t\treturn 10 * x;\n\t}\n}\n\npublic class HoFDemo {\n\tpublic static int do_twice(IntUnaryFunction f, int x) {\n   \t\treturn f.apply(f.apply(x));\n\t}\n\tpublic static void main(String[] args) {\n   \t\tSystem.out.println(do_twice(new TenX(), 2));\n\t}\n}\n```\n\n\n","source":"_posts/CS61B-lecture7，8，9.md","raw":"---\ntitle: CS61B-lecture7，8，9\ndate: 2020-07-29 11:49:12\ntags: \n    \ncategories:  \nkeywords: CS61B\ndescription: 继承，抽象，接口,JUnit,封装，override，overload，casting\ncover: https://s1.ax1x.com/2020/07/18/U2sqXV.jpg\n---\n\n# Interface Inheritance\n\n\n\n\n## 子类和父类的构造器\n\n![aViADe.png](https://s1.ax1x.com/2020/07/28/aViADe.png)\n\n## Super();\n\n- 当使用了子类的构造器时，会自动加入一行代码`super();`表示使用了父类的构造器\n\n- Use super to invoke overridden superclass methods and constructors.(使用super来调用父类被override的方法)\n\n\n\n\n# implements和extends\n## 父类和子类\nimplements和extends 代表了父类和子类的关系，子类继承父类所有的签名\n    \n如果子类要继承方法，需要用default标明\n\n**子类需要override所用方法并用 ·@override· 标明**\n原因是可能有些时候两个方法不满足override条件，需要这行代码来检查\n\n子类对象确实拥有父类对象中所有的属性和方法，但是父类对象中的私有属性和方法，子类是无法访问到的，只是拥有，但不能使用。\n\n当子类覆盖父类的成员变量时，父类方法使用的是父类的成员变量，子类方法使用的是子类的成员变量\n\n- 子类覆盖父类的方法，必须有同样的参数返回类型，否则编译不能通过\n- 子类覆盖父类的方法，在jdk1.5后，参数返回类可以是父类方法返回类的子类\n- 子类覆盖父类方法，可以修改方法作用域修饰符，但只能把方法的作用域放大，而不能把public修改为private\n- 子类方法能够访问父类的protected作用域成员，不能够访问默认的作用域成员,除非子类与父类同包\n- 子类的静态方法不能隐藏同名的父类实例方法\n\n***注意：*** 子类不能直接访问父类的私有属性，子类只能在父类中写一个public的getXXX的方法来获取父类中的private属性，子类就调用父类的getXXX来获取private属性\n\n## 总结\n父类中的公有方法和域(属性)，在类继承中将会被子类继承，但是私有的将不能被继承。\n## extends和implements的区别\nWhen a class is a hyponym of an interface, we used implements.\nExample: SLList<Blorp> implements List61B<Blorp>\n\nIf you want one class to be a hyponym of another class, you use extends.\n\n- extends是继承父类，只要那个类不是声明为final或者那个类定义为abstract的就能继承，\n- JAVA中不支持多重继承，但是可以用接口来实现，这样就要用到implements，\n- 继承只能继承一个类，但implements可以实现多个接口，用逗号分开就行了 ,\n     比如  `class A extends B implementsC,D,E   `\n\n \n\n\n\n \n\n## 总结\n对于class而言，extends用于（单）继承一个类（class），而implements用于实现一个接口（interface）。  \n\ninterface的引入是为了部分地提供多继承的功能。在interface中只需声明方法头，而将方法体留给实现的class来做。这些实现的class的实例完全可以当作interface的实例来对待。在interface之间也可以声明为extends（多继承）的关系。\n\n \n\n \n注意:一个interface可以extends多个其他interface。\n\n\n# Casting\n以下代码用了casting可以编译\n\n```\nPoodle frank  = new Poodle(\"Frank\", 5);\nPoodle frankJr = new Poodle(\"Frank Jr.\", 15);\nDog largerDog = maxDog(frank, frankJr);\nPoodle largerPoodle = (Poodle) maxDog(frank, frankJr);\n```\n注意：\n- casting使得编译器可以将动态类型为父类表示为它的子类，但是在使用子类的方法时可能会报错\n- casting不会改变参数类型\n\n\n# Dynamic Method Selection\n\n## 在使用override时\n\n决定最终方法使用的是`dynamic type`，也叫`run-time type` 与次相对应的还有`static type`，也叫`compile-time type`\n\n    \n\n## 在使用overload时\n\n根据参数静态类型来决定方法调用，当找不到时会找一个近似的，实在没有会报错\n\n## 注意事项：\n- overload的优先级在override之上\n\n- Remember: The compiler chooses the most specific matching method signature from the static type of the invoking class.（override调用规则）\n\n\n# JUnit\n![aEvnVx.png](https://s1.ax1x.com/2020/07/28/aEvnVx.png)\n\n## New Syntax #1: \n`assertEquals(expected, actual);`\n- Tests that expected equals actual.\n- If not, program terminates with verbose message.\n- Other methods like `assertEquals` include `assertFalse`, `assertNotNull`, etc., see http://junit.org/junit4/javadoc/4.12/org/junit/Assert.html\n\n## 在使用JUnit时import\n\n```\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n```\n\n\n## JUnittest 格式：\n```\n@Test\npublic void testSort() {\n  ...\n}\n```\n\n# Higher Order Function \nA function that treats another function as data.\n## Example in Python\n\n```\ndef tenX(x):\n\treturn 10*x\n \ndef do_twice(f, x):\n\treturn f(f(x))\n \nprint(do_twice(tenX, 2)) \n```\n## Same in java\n```\npublic interface IntUnaryFunction {\n\tint apply(int x);\n}\n\npublic class TenX implements IntUnaryFunction {\n\tpublic int apply(int x) {\n   \t\treturn 10 * x;\n\t}\n}\n\npublic class HoFDemo {\n\tpublic static int do_twice(IntUnaryFunction f, int x) {\n   \t\treturn f.apply(f.apply(x));\n\t}\n\tpublic static void main(String[] args) {\n   \t\tSystem.out.println(do_twice(new TenX(), 2));\n\t}\n}\n```\n\n\n","slug":"CS61B-lecture7，8，9","published":1,"updated":"2020-07-29T15:36:14.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd8jouma0005f0tz8moue2ki","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"Interface-Inheritance\"><a href=\"#Interface-Inheritance\" class=\"headerlink\" title=\"Interface Inheritance\"></a>Interface Inheritance</h1><h2 id=\"子类和父类的构造器\"><a href=\"#子类和父类的构造器\" class=\"headerlink\" title=\"子类和父类的构造器\"></a>子类和父类的构造器</h2><p><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/28/aViADe.png\" alt=\"aViADe.png\"></p>\n<h2 id=\"Super\"><a href=\"#Super\" class=\"headerlink\" title=\"Super();\"></a>Super();</h2><ul>\n<li><p>当使用了子类的构造器时，会自动加入一行代码<code>super();</code>表示使用了父类的构造器</p>\n</li>\n<li><p>Use super to invoke overridden superclass methods and constructors.(使用super来调用父类被override的方法)</p>\n</li>\n</ul>\n<h1 id=\"implements和extends\"><a href=\"#implements和extends\" class=\"headerlink\" title=\"implements和extends\"></a>implements和extends</h1><h2 id=\"父类和子类\"><a href=\"#父类和子类\" class=\"headerlink\" title=\"父类和子类\"></a>父类和子类</h2><p>implements和extends 代表了父类和子类的关系，子类继承父类所有的签名</p>\n<p>如果子类要继承方法，需要用default标明</p>\n<p><strong>子类需要override所用方法并用 ·@override· 标明</strong><br>原因是可能有些时候两个方法不满足override条件，需要这行代码来检查</p>\n<p>子类对象确实拥有父类对象中所有的属性和方法，但是父类对象中的私有属性和方法，子类是无法访问到的，只是拥有，但不能使用。</p>\n<p>当子类覆盖父类的成员变量时，父类方法使用的是父类的成员变量，子类方法使用的是子类的成员变量</p>\n<ul>\n<li>子类覆盖父类的方法，必须有同样的参数返回类型，否则编译不能通过</li>\n<li>子类覆盖父类的方法，在jdk1.5后，参数返回类可以是父类方法返回类的子类</li>\n<li>子类覆盖父类方法，可以修改方法作用域修饰符，但只能把方法的作用域放大，而不能把public修改为private</li>\n<li>子类方法能够访问父类的protected作用域成员，不能够访问默认的作用域成员,除非子类与父类同包</li>\n<li>子类的静态方法不能隐藏同名的父类实例方法</li>\n</ul>\n<p><strong><em>注意：</em></strong> 子类不能直接访问父类的私有属性，子类只能在父类中写一个public的getXXX的方法来获取父类中的private属性，子类就调用父类的getXXX来获取private属性</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>父类中的公有方法和域(属性)，在类继承中将会被子类继承，但是私有的将不能被继承。</p>\n<h2 id=\"extends和implements的区别\"><a href=\"#extends和implements的区别\" class=\"headerlink\" title=\"extends和implements的区别\"></a>extends和implements的区别</h2><p>When a class is a hyponym of an interface, we used implements.<br>Example: SLList<Blorp> implements List61B<Blorp></p>\n<p>If you want one class to be a hyponym of another class, you use extends.</p>\n<ul>\n<li>extends是继承父类，只要那个类不是声明为final或者那个类定义为abstract的就能继承，</li>\n<li>JAVA中不支持多重继承，但是可以用接口来实现，这样就要用到implements，</li>\n<li>继承只能继承一个类，但implements可以实现多个接口，用逗号分开就行了 ,<br>   比如  <code>class A extends B implementsC,D,E   </code></li>\n</ul>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对于class而言，extends用于（单）继承一个类（class），而implements用于实现一个接口（interface）。  </p>\n<p>interface的引入是为了部分地提供多继承的功能。在interface中只需声明方法头，而将方法体留给实现的class来做。这些实现的class的实例完全可以当作interface的实例来对待。在interface之间也可以声明为extends（多继承）的关系。</p>\n<p>注意:一个interface可以extends多个其他interface。</p>\n<h1 id=\"Casting\"><a href=\"#Casting\" class=\"headerlink\" title=\"Casting\"></a>Casting</h1><p>以下代码用了casting可以编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Poodle frank  &#x3D; new Poodle(&quot;Frank&quot;, 5);</span><br><span class=\"line\">Poodle frankJr &#x3D; new Poodle(&quot;Frank Jr.&quot;, 15);</span><br><span class=\"line\">Dog largerDog &#x3D; maxDog(frank, frankJr);</span><br><span class=\"line\">Poodle largerPoodle &#x3D; (Poodle) maxDog(frank, frankJr);</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>casting使得编译器可以将动态类型为父类表示为它的子类，但是在使用子类的方法时可能会报错</li>\n<li>casting不会改变参数类型</li>\n</ul>\n<h1 id=\"Dynamic-Method-Selection\"><a href=\"#Dynamic-Method-Selection\" class=\"headerlink\" title=\"Dynamic Method Selection\"></a>Dynamic Method Selection</h1><h2 id=\"在使用override时\"><a href=\"#在使用override时\" class=\"headerlink\" title=\"在使用override时\"></a>在使用override时</h2><p>决定最终方法使用的是<code>dynamic type</code>，也叫<code>run-time type</code> 与次相对应的还有<code>static type</code>，也叫<code>compile-time type</code></p>\n<h2 id=\"在使用overload时\"><a href=\"#在使用overload时\" class=\"headerlink\" title=\"在使用overload时\"></a>在使用overload时</h2><p>根据参数静态类型来决定方法调用，当找不到时会找一个近似的，实在没有会报错</p>\n<h2 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h2><ul>\n<li><p>overload的优先级在override之上</p>\n</li>\n<li><p>Remember: The compiler chooses the most specific matching method signature from the static type of the invoking class.（override调用规则）</p>\n</li>\n</ul>\n<h1 id=\"JUnit\"><a href=\"#JUnit\" class=\"headerlink\" title=\"JUnit\"></a>JUnit</h1><p><img src= \"/img/loading.gif\" data-src=\"https://s1.ax1x.com/2020/07/28/aEvnVx.png\" alt=\"aEvnVx.png\"></p>\n<h2 id=\"New-Syntax-1\"><a href=\"#New-Syntax-1\" class=\"headerlink\" title=\"New Syntax #1:\"></a>New Syntax #1:</h2><p><code>assertEquals(expected, actual);</code></p>\n<ul>\n<li>Tests that expected equals actual.</li>\n<li>If not, program terminates with verbose message.</li>\n<li>Other methods like <code>assertEquals</code> include <code>assertFalse</code>, <code>assertNotNull</code>, etc., see <a href=\"http://junit.org/junit4/javadoc/4.12/org/junit/Assert.html\">http://junit.org/junit4/javadoc/4.12/org/junit/Assert.html</a></li>\n</ul>\n<h2 id=\"在使用JUnit时import\"><a href=\"#在使用JUnit时import\" class=\"headerlink\" title=\"在使用JUnit时import\"></a>在使用JUnit时import</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import static org.junit.Assert.*;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"JUnittest-格式：\"><a href=\"#JUnittest-格式：\" class=\"headerlink\" title=\"JUnittest 格式：\"></a>JUnittest 格式：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testSort() &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Higher-Order-Function\"><a href=\"#Higher-Order-Function\" class=\"headerlink\" title=\"Higher Order Function\"></a>Higher Order Function</h1><p>A function that treats another function as data.</p>\n<h2 id=\"Example-in-Python\"><a href=\"#Example-in-Python\" class=\"headerlink\" title=\"Example in Python\"></a>Example in Python</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def tenX(x):</span><br><span class=\"line\">    return 10*x</span><br><span class=\"line\"> </span><br><span class=\"line\">def do_twice(f, x):</span><br><span class=\"line\">    return f(f(x))</span><br><span class=\"line\"> </span><br><span class=\"line\">print(do_twice(tenX, 2)) </span><br></pre></td></tr></table></figure>\n<h2 id=\"Same-in-java\"><a href=\"#Same-in-java\" class=\"headerlink\" title=\"Same in java\"></a>Same in java</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IntUnaryFunction &#123;</span><br><span class=\"line\">    int apply(int x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TenX implements IntUnaryFunction &#123;</span><br><span class=\"line\">    public int apply(int x) &#123;</span><br><span class=\"line\">           return 10 * x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HoFDemo &#123;</span><br><span class=\"line\">    public static int do_twice(IntUnaryFunction f, int x) &#123;</span><br><span class=\"line\">           return f.apply(f.apply(x));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">           System.out.println(do_twice(new TenX(), 2));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"Interface-Inheritance\"><a href=\"#Interface-Inheritance\" class=\"headerlink\" title=\"Interface Inheritance\"></a>Interface Inheritance</h1><h2 id=\"子类和父类的构造器\"><a href=\"#子类和父类的构造器\" class=\"headerlink\" title=\"子类和父类的构造器\"></a>子类和父类的构造器</h2><p><img src=\"https://s1.ax1x.com/2020/07/28/aViADe.png\" alt=\"aViADe.png\"></p>\n<h2 id=\"Super\"><a href=\"#Super\" class=\"headerlink\" title=\"Super();\"></a>Super();</h2><ul>\n<li><p>当使用了子类的构造器时，会自动加入一行代码<code>super();</code>表示使用了父类的构造器</p>\n</li>\n<li><p>Use super to invoke overridden superclass methods and constructors.(使用super来调用父类被override的方法)</p>\n</li>\n</ul>\n<h1 id=\"implements和extends\"><a href=\"#implements和extends\" class=\"headerlink\" title=\"implements和extends\"></a>implements和extends</h1><h2 id=\"父类和子类\"><a href=\"#父类和子类\" class=\"headerlink\" title=\"父类和子类\"></a>父类和子类</h2><p>implements和extends 代表了父类和子类的关系，子类继承父类所有的签名</p>\n<p>如果子类要继承方法，需要用default标明</p>\n<p><strong>子类需要override所用方法并用 ·@override· 标明</strong><br>原因是可能有些时候两个方法不满足override条件，需要这行代码来检查</p>\n<p>子类对象确实拥有父类对象中所有的属性和方法，但是父类对象中的私有属性和方法，子类是无法访问到的，只是拥有，但不能使用。</p>\n<p>当子类覆盖父类的成员变量时，父类方法使用的是父类的成员变量，子类方法使用的是子类的成员变量</p>\n<ul>\n<li>子类覆盖父类的方法，必须有同样的参数返回类型，否则编译不能通过</li>\n<li>子类覆盖父类的方法，在jdk1.5后，参数返回类可以是父类方法返回类的子类</li>\n<li>子类覆盖父类方法，可以修改方法作用域修饰符，但只能把方法的作用域放大，而不能把public修改为private</li>\n<li>子类方法能够访问父类的protected作用域成员，不能够访问默认的作用域成员,除非子类与父类同包</li>\n<li>子类的静态方法不能隐藏同名的父类实例方法</li>\n</ul>\n<p><strong><em>注意：</em></strong> 子类不能直接访问父类的私有属性，子类只能在父类中写一个public的getXXX的方法来获取父类中的private属性，子类就调用父类的getXXX来获取private属性</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>父类中的公有方法和域(属性)，在类继承中将会被子类继承，但是私有的将不能被继承。</p>\n<h2 id=\"extends和implements的区别\"><a href=\"#extends和implements的区别\" class=\"headerlink\" title=\"extends和implements的区别\"></a>extends和implements的区别</h2><p>When a class is a hyponym of an interface, we used implements.<br>Example: SLList<Blorp> implements List61B<Blorp></p>\n<p>If you want one class to be a hyponym of another class, you use extends.</p>\n<ul>\n<li>extends是继承父类，只要那个类不是声明为final或者那个类定义为abstract的就能继承，</li>\n<li>JAVA中不支持多重继承，但是可以用接口来实现，这样就要用到implements，</li>\n<li>继承只能继承一个类，但implements可以实现多个接口，用逗号分开就行了 ,<br>   比如  <code>class A extends B implementsC,D,E   </code></li>\n</ul>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对于class而言，extends用于（单）继承一个类（class），而implements用于实现一个接口（interface）。  </p>\n<p>interface的引入是为了部分地提供多继承的功能。在interface中只需声明方法头，而将方法体留给实现的class来做。这些实现的class的实例完全可以当作interface的实例来对待。在interface之间也可以声明为extends（多继承）的关系。</p>\n<p>注意:一个interface可以extends多个其他interface。</p>\n<h1 id=\"Casting\"><a href=\"#Casting\" class=\"headerlink\" title=\"Casting\"></a>Casting</h1><p>以下代码用了casting可以编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Poodle frank  &#x3D; new Poodle(&quot;Frank&quot;, 5);</span><br><span class=\"line\">Poodle frankJr &#x3D; new Poodle(&quot;Frank Jr.&quot;, 15);</span><br><span class=\"line\">Dog largerDog &#x3D; maxDog(frank, frankJr);</span><br><span class=\"line\">Poodle largerPoodle &#x3D; (Poodle) maxDog(frank, frankJr);</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>casting使得编译器可以将动态类型为父类表示为它的子类，但是在使用子类的方法时可能会报错</li>\n<li>casting不会改变参数类型</li>\n</ul>\n<h1 id=\"Dynamic-Method-Selection\"><a href=\"#Dynamic-Method-Selection\" class=\"headerlink\" title=\"Dynamic Method Selection\"></a>Dynamic Method Selection</h1><h2 id=\"在使用override时\"><a href=\"#在使用override时\" class=\"headerlink\" title=\"在使用override时\"></a>在使用override时</h2><p>决定最终方法使用的是<code>dynamic type</code>，也叫<code>run-time type</code> 与次相对应的还有<code>static type</code>，也叫<code>compile-time type</code></p>\n<h2 id=\"在使用overload时\"><a href=\"#在使用overload时\" class=\"headerlink\" title=\"在使用overload时\"></a>在使用overload时</h2><p>根据参数静态类型来决定方法调用，当找不到时会找一个近似的，实在没有会报错</p>\n<h2 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h2><ul>\n<li><p>overload的优先级在override之上</p>\n</li>\n<li><p>Remember: The compiler chooses the most specific matching method signature from the static type of the invoking class.（override调用规则）</p>\n</li>\n</ul>\n<h1 id=\"JUnit\"><a href=\"#JUnit\" class=\"headerlink\" title=\"JUnit\"></a>JUnit</h1><p><img src=\"https://s1.ax1x.com/2020/07/28/aEvnVx.png\" alt=\"aEvnVx.png\"></p>\n<h2 id=\"New-Syntax-1\"><a href=\"#New-Syntax-1\" class=\"headerlink\" title=\"New Syntax #1:\"></a>New Syntax #1:</h2><p><code>assertEquals(expected, actual);</code></p>\n<ul>\n<li>Tests that expected equals actual.</li>\n<li>If not, program terminates with verbose message.</li>\n<li>Other methods like <code>assertEquals</code> include <code>assertFalse</code>, <code>assertNotNull</code>, etc., see <a href=\"http://junit.org/junit4/javadoc/4.12/org/junit/Assert.html\">http://junit.org/junit4/javadoc/4.12/org/junit/Assert.html</a></li>\n</ul>\n<h2 id=\"在使用JUnit时import\"><a href=\"#在使用JUnit时import\" class=\"headerlink\" title=\"在使用JUnit时import\"></a>在使用JUnit时import</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import static org.junit.Assert.*;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"JUnittest-格式：\"><a href=\"#JUnittest-格式：\" class=\"headerlink\" title=\"JUnittest 格式：\"></a>JUnittest 格式：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testSort() &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Higher-Order-Function\"><a href=\"#Higher-Order-Function\" class=\"headerlink\" title=\"Higher Order Function\"></a>Higher Order Function</h1><p>A function that treats another function as data.</p>\n<h2 id=\"Example-in-Python\"><a href=\"#Example-in-Python\" class=\"headerlink\" title=\"Example in Python\"></a>Example in Python</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def tenX(x):</span><br><span class=\"line\">    return 10*x</span><br><span class=\"line\"> </span><br><span class=\"line\">def do_twice(f, x):</span><br><span class=\"line\">    return f(f(x))</span><br><span class=\"line\"> </span><br><span class=\"line\">print(do_twice(tenX, 2)) </span><br></pre></td></tr></table></figure>\n<h2 id=\"Same-in-java\"><a href=\"#Same-in-java\" class=\"headerlink\" title=\"Same in java\"></a>Same in java</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IntUnaryFunction &#123;</span><br><span class=\"line\">    int apply(int x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TenX implements IntUnaryFunction &#123;</span><br><span class=\"line\">    public int apply(int x) &#123;</span><br><span class=\"line\">           return 10 * x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HoFDemo &#123;</span><br><span class=\"line\">    public static int do_twice(IntUnaryFunction f, int x) &#123;</span><br><span class=\"line\">           return f.apply(f.apply(x));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">           System.out.println(do_twice(new TenX(), 2));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"Git命令","date":"2020-07-26T15:40:42.000Z","keywords":null,"description":"Github的一些常用指令","cover":"https://s1.ax1x.com/2020/07/26/aCIWz4.png","_content":"\n#本地修改提交：\n\n```\ngit add .\ngit commit -m \"\"\ngit push origin master\n```\n\n##其他类型git add：\n- git add -A  提交所有变化\n- git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)\n- git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件\n","source":"_posts/Git命令.md","raw":"---\ntitle: Git命令\ndate: 2020-07-26 23:40:42\ntags:\n\t- 笔记\n\t- Git\ncategories: Git\nkeywords:\ndescription: Github的一些常用指令\ncover: https://s1.ax1x.com/2020/07/26/aCIWz4.png\n---\n\n#本地修改提交：\n\n```\ngit add .\ngit commit -m \"\"\ngit push origin master\n```\n\n##其他类型git add：\n- git add -A  提交所有变化\n- git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)\n- git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件\n","slug":"Git命令","published":1,"updated":"2020-07-26T16:05:53.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd8joumc0007f0tzcdmfb4ef","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>#本地修改提交：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>##其他类型git add：</p>\n<ul>\n<li>git add -A  提交所有变化</li>\n<li>git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</li>\n<li>git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p>#本地修改提交：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>##其他类型git add：</p>\n<ul>\n<li>git add -A  提交所有变化</li>\n<li>git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</li>\n<li>git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</li>\n</ul>\n"},{"title":"hexo指令","date":"2020-07-30T06:11:21.000Z","_content":"# 豆瓣\n爬取豆瓣\n` hexo douban -bgm`\nbgm是参数，分别对应 book，game和movie\n\n更新豆瓣\n`npm install hexo-douban --update --save`\n# Bilibili\n\n爬取bilibili\n在`hexo generate`或`hexo deploy`之前使用`hexo bangumi -u`命令更新番剧数据！\n删除数据命令:`hexo bangumi -d`\n\n更新bilibili插件\n`npm install hexo-bilibili-bangumi --update --save`\n\n\n# 备份博客源文件\n有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。\n\n首先在github博客仓库下新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下。\n\n然后git branch -b hexo切换到hexo分支，然后git add .，然后git commit -m \"xxx\"，最后git push origin hexo提交就行了。","source":"_posts/hexo指令.md","raw":"---\ntitle: hexo指令\ndate: 2020-07-30 14:11:21\ntags:\n---\n# 豆瓣\n爬取豆瓣\n` hexo douban -bgm`\nbgm是参数，分别对应 book，game和movie\n\n更新豆瓣\n`npm install hexo-douban --update --save`\n# Bilibili\n\n爬取bilibili\n在`hexo generate`或`hexo deploy`之前使用`hexo bangumi -u`命令更新番剧数据！\n删除数据命令:`hexo bangumi -d`\n\n更新bilibili插件\n`npm install hexo-bilibili-bangumi --update --save`\n\n\n# 备份博客源文件\n有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。\n\n首先在github博客仓库下新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下。\n\n然后git branch -b hexo切换到hexo分支，然后git add .，然后git commit -m \"xxx\"，最后git push origin hexo提交就行了。","slug":"hexo指令","published":1,"updated":"2020-07-30T07:55:46.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd8joump000jf0tz4jmrcb2s","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"豆瓣\"><a href=\"#豆瓣\" class=\"headerlink\" title=\"豆瓣\"></a>豆瓣</h1><p>爬取豆瓣<br><code> hexo douban -bgm</code><br>bgm是参数，分别对应 book，game和movie</p>\n<p>更新豆瓣<br><code>npm install hexo-douban --update --save</code></p>\n<h1 id=\"Bilibili\"><a href=\"#Bilibili\" class=\"headerlink\" title=\"Bilibili\"></a>Bilibili</h1><p>爬取bilibili<br>在<code>hexo generate</code>或<code>hexo deploy</code>之前使用<code>hexo bangumi -u</code>命令更新番剧数据！<br>删除数据命令:<code>hexo bangumi -d</code></p>\n<p>更新bilibili插件<br><code>npm install hexo-bilibili-bangumi --update --save</code></p>\n<h1 id=\"备份博客源文件\"><a href=\"#备份博客源文件\" class=\"headerlink\" title=\"备份博客源文件\"></a>备份博客源文件</h1><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。</p>\n<p>首先在github博客仓库下新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下。</p>\n<p>然后git branch -b hexo切换到hexo分支，然后git add .，然后git commit -m “xxx”，最后git push origin hexo提交就行了。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"JerryC","link":"https://jerryc.me/","avatar":"https://jerryc.me/image/avatar.png","descr":"今日事,今日毕"},{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s1.ax1x.com/2020/07/18/U2sqXV.jpg","excerpt":"","more":"<h1 id=\"豆瓣\"><a href=\"#豆瓣\" class=\"headerlink\" title=\"豆瓣\"></a>豆瓣</h1><p>爬取豆瓣<br><code> hexo douban -bgm</code><br>bgm是参数，分别对应 book，game和movie</p>\n<p>更新豆瓣<br><code>npm install hexo-douban --update --save</code></p>\n<h1 id=\"Bilibili\"><a href=\"#Bilibili\" class=\"headerlink\" title=\"Bilibili\"></a>Bilibili</h1><p>爬取bilibili<br>在<code>hexo generate</code>或<code>hexo deploy</code>之前使用<code>hexo bangumi -u</code>命令更新番剧数据！<br>删除数据命令:<code>hexo bangumi -d</code></p>\n<p>更新bilibili插件<br><code>npm install hexo-bilibili-bangumi --update --save</code></p>\n<h1 id=\"备份博客源文件\"><a href=\"#备份博客源文件\" class=\"headerlink\" title=\"备份博客源文件\"></a>备份博客源文件</h1><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。</p>\n<p>首先在github博客仓库下新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下。</p>\n<p>然后git branch -b hexo切换到hexo分支，然后git add .，然后git commit -m “xxx”，最后git push origin hexo提交就行了。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckd8joumc0007f0tzcdmfb4ef","category_id":"ckd8joume0009f0tzgkma3cgr","_id":"ckd8joumi000gf0tz3akw8k8k"}],"PostTag":[{"post_id":"ckd8joumc0007f0tzcdmfb4ef","tag_id":"ckd8joumf000af0tz7qj5d7ky","_id":"ckd8joumi000hf0tzfyom1qkt"},{"post_id":"ckd8joumc0007f0tzcdmfb4ef","tag_id":"ckd8joumh000ef0tz91pb76g8","_id":"ckd8joumj000if0tz5kq458j6"}],"Tag":[{"name":"笔记","_id":"ckd8joumf000af0tz7qj5d7ky"},{"name":"Git","_id":"ckd8joumh000ef0tz91pb76g8"}]}}